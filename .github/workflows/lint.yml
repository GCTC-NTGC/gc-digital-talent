name: Lint

on:
  push:
    branches: [main]
    paths:
      - .github/workflows/*lint*.yml
      - apps/**
      - packages/**
      - api/**
  pull_request:
    paths:
      - .github/workflows/*lint*.yml
      - apps/**
      - packages/**
      - api/**
  merge_group:
    branches: [main]
jobs:
  run-linters:
    name: Run linters
    runs-on: ubuntu-22.04
    env:
      NPM_VERSION: "8.11.0"

    services:
      postgres:
        image: postgres:12.15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password1234
          POSTGRES_DB: gctalent
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: "./.nvmrc"
          cache: "npm"
          cache-dependency-path: "./package-lock.json"
      - name: List initial postgres extensions
        run: docker run --rm --network ${{ job.container.network }} postgres:12.15 sh -c "PGPASSWORD=password1234 exec psql -h postgres -d gctalent -p 5432 -U postgres -t -c 'SELECT * FROM pg_extension';"
      - name: Add postgres extension plpgsql
        run: docker run --rm --network ${{ job.container.network }} postgres:12.15 sh -c 'PGPASSWORD=password1234 exec psql -h postgres -d gctalent -p 5432 -U postgres -t -c "CREATE EXTENSION IF NOT EXISTS plpgsql WITH VERSION '1.0';"'
      - name: Add postgres extension pgcrypto
        run: docker run --rm --network ${{ job.container.network }} postgres:12.15 sh -c 'PGPASSWORD=password1234 exec psql -h postgres -d gctalent -p 5432 -U postgres -t -c 'CREATE EXTENSION IF NOT EXISTS pgcrypto WITH VERSION '1.3';"'
      - name: List updated postgres extensions
        run: docker run --rm --network ${{ job.container.network }} postgres:12.15 sh -c "PGPASSWORD=password1234 exec psql -h postgres -d gctalent -p 5432 -U postgres -t -c 'SELECT * FROM pg_extension';"
    # steps:
    #   - uses: actions/checkout@v4
    #   - name: Use Node.js
    #     uses: actions/setup-node@v3
    #     with:
    #       node-version-file: "./.nvmrc"
    #       cache: "npm"
    #       cache-dependency-path: "./package-lock.json"

    #   - name: Upgrade npm
    #     run: npm install --location=global npm@${{ env.NPM_VERSION }}

    #   - name: "Install dependencies: workspace"
    #     working-directory: ./
    #     run: npm install

    #   - name: "Setup: all workspaces"
    #     working-directory: ./
    #     run: npm run build

    #   - name: "Run ESlint: all workspaces"
    #     working-directory: ./
    #     # Pass arg to eslint so that any warnings will raise error code and fail workflow.
    #     run: npm run lint -- -- --max-warnings=0

    #   - name: "Run typescript linting: all workspaces"
    #     # Allow tsc linting to happen even if js linting step raises errors.
    #     if: always()
    #     working-directory: ./
    #     run: npm run tsc

    #   - name: Setup PHP
    #     uses: shivammathur/setup-php@v2
    #     with:
    #       php-version: "8.1"
    #       extensions: bcmath

    #   - name: Install composer dependencies
    #     working-directory: api
    #     run: |
    #       cp .env.example .env
    #       composer install --no-interaction --prefer-dist --optimize-autoloader

    #   - name: Run Pint
    #     working-directory: api
    #     run: vendor/bin/pint --test
