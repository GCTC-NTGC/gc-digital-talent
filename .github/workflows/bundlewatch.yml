name: "bundlewatch"

# Ensure Dependabot can write bundlewatch summary to status check.
# See: https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/automating-dependabot-with-github-actions#changing-github_token-permissions
permissions:
  statuses: write
  checks: write

on:
  push:
    # Generating bundlesize for mainline allows comparison of PR runs against baseline via bundlewatch hosted service.
    branches: ["main"]
    paths:
      - .github/workflows/bundlewatch.yml
      - frontend/**
      - auth/**
  pull_request:
    paths:
      - .github/workflows/bundlewatch.yml
      - frontend/**
      - auth/**

jobs:
  runner:
    runs-on: ubuntu-latest
    env:
      NPM_VERSION: '8.3.0'
      # Used to write status check on PRs within upstream repo.
      # Note: Will not work for PRs from forks.
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Use native docker command within docker-compose
      COMPOSE_DOCKER_CLI_BUILD: 1
      # Use buildkit to speed up docker command
      DOCKER_BUILDKIT: 1

    steps:
      - uses: actions/checkout@v2.4.0

      - uses: actions/setup-node@v2.5.1
        with:
          node-version-file: 'frontend/.nvmrc'
          cache: npm
          # We include `auth/` even though we don't use it.
          # This allows cache key to match across all workflows.
          cache-dependency-path: |
            auth/package-lock.json
            frontend/package-lock.json

      - name: Upgrade to latest npm
        run: npm install --global npm@${{ env.NPM_VERSION }}

      - name: "Install & Build: auth"
        working-directory: auth
        run: |
          npm install
          npm run production

      - name: "Install dependencies: workspace"
        working-directory: frontend
        run: |
          npm install
          # Work-around until Hydrogen is updated: we trick hydrogen into thinking its installed in the package path.
          # See: https://github.com/hydrogen-design-system/hydrogen.css/issues/72
          mkdir -p admin/node_modules common/node_modules talentsearch/node_modules
          (cd admin/node_modules && ln -s ../../node_modules/@hydrogen-design-system .)
          (cd common/node_modules && ln -s ../../node_modules/@hydrogen-design-system .)
          (cd talentsearch/node_modules && ln -s ../../node_modules/@hydrogen-design-system .)

      - name: "Build: common"
        working-directory: frontend/common
        run: |
          npm run h2-build
          npm run codegen
          npm run intl-compile

      - name: "Build: admin"
        working-directory: frontend/admin
        run: |
          npm run h2-build
          npm run codegen
          npm run intl-compile
          npm run production

      - name: "Build: talentsearch"
        working-directory: frontend/talentsearch
        run: |
          npm run h2-build
          npm run codegen
          npm run intl-compile
          npm run production

      # Allows SSH access into CI environment for up to 1h.
      # Use `touch ~/continue` with session to end each one.
      # Only enable when trying to troubleshoot.
      #
      # Note: Be cautious, as secrets in environment can be compromised.
      #   Consider using in PRs from forks, without secrets available.
      #
      # See: https://github.com/lhotari/action-upterm
      - name: Create upterm session for debug
        uses: lhotari/action-upterm@v1
        if: ${{ false }}
        # if: ${{ always() }}

      - name: Install Bundlewatch
        run: npm install -g bundlewatch@0.2.6

      - name: "Run Bundlewatch"
        env:
          CI_BRANCH_DEFAULT: ${{ github.event.repository.default_branch }}

          PR_COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          # Overrides `ci.repoBranchBase` (bundlewatch config)
          PR_BRANCH_BASE: ${{ github.event.pull_request.base.ref }}

          PUSH_COMMIT_SHA: ${{ github.event.after }}
          # PUSH_BRANCH: see below (needs processing)
          PUSH_BRANCH_BASE: ${{ github.event.repository.default_branch }}
        # Empty `package.json` in root is a work-around to run bundlewatch in monorepo.
        # See: https://github.com/bundlewatch/bundlewatch/pull/170#issuecomment-648881619
        #
        # GITHUB_REF is in format `refs/heads/branch-name`, so need to strip first part.
        run: |
          PUSH_BRANCH=${GITHUB_REF#refs/heads/} npx bundlewatch --config .bundlewatch.config.js
