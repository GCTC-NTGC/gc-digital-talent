@use '../maps/map-whitespace' as whitespaceMap;

// Grid Alignment Map
$h2-map-grid-alignment: (
  'normal': 'normal',
  'top': 'flex-start',
  'middle': 'center',
  'bottom': 'flex-end',
  'stretch': 'stretch',
);

// Grid Expansion Map
$h2-map-grid-expansion: (
  'contained': 'contained',
  'expanded': 'expanded',
);

// Grid Padding Map
$h2-map-grid-padding: (
  'padded': 'padded',
  'flush': 'flush',
);

$h2GridColumns: 12;

@mixin h2-utility-flex-grid($mediaKey) {
  @each $alignmentKey, $alignmentValue in $h2-map-grid-alignment {
    @each $expansionKey, $expansionValue in $h2-map-grid-expansion {
      @each $paddingKey, $paddingValue in $h2-map-grid-padding {
        @each $whitespaceKey,
          $whitespaceValue in whitespaceMap.$h2-map-whitespace
        {
          [data-h2-flex-grid*='#{$mediaKey}(#{$alignmentKey}, #{$expansionKey}, #{$paddingKey}, #{$whitespaceKey})'] {
            align-items: #{$alignmentValue};
            display: flex;
            flex-wrap: wrap;
            @if $expansionKey == 'expanded' {
              margin: calc((#{$whitespaceValue}/ 2) * -1);
            }
            @if $paddingKey == 'padded' {
              padding: calc(#{$whitespaceValue}/ 2);
            }
            > [data-h2-flex-item] {
              padding: calc(#{$whitespaceValue}/ 2);
            }
          }
        }
      }
    }
  }
  @for $i from 1 through $h2GridColumns {
    @for $r from 1 through $h2GridColumns {
      [data-h2-flex-grid] > [data-h2-flex-item*='#{$mediaKey}(#{$i}of#{$r})'] {
        flex: 0 0 calc(#{$i} / #{$r} * 100%);
        max-width: calc(#{$i} / #{$r} * 100%);
      }
    }
  }
  [data-h2-flex-grid] > [data-h2-flex-item*='#{$mediaKey}(auto)'] {
    flex: auto;
    max-width: 100%;
  }
  [data-h2-flex-grid] > [data-h2-flex-item*='#{$mediaKey}(content)'] {
    flex: initial;
    max-width: 100%;
  }
}
