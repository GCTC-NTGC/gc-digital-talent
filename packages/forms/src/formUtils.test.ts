import {
  matchStringCaseDiacriticInsensitive,
  enumToOptions,
  countNumberOfWords,
  alphaSortOptions,
  countNumberOfWordsAfterReplacingHTML,
} from "./utils";

describe("string matching tests", () => {
  const f = matchStringCaseDiacriticInsensitive;
  test("it doesn't match strings that are clearly different", () => {
    expect(f("apples", "oranges")).toBeFalsy();
  });
  test("it matches simple strings", () => {
    expect(f("tomato", "tomato")).toBeTruthy();
  });
  test("it matches strings with diacritics to the simplified version", () => {
    expect(f("facade", "façade")).toBeTruthy();
  });
  test("it matches strings with diacritics to the same string", () => {
    expect(f("façade", "façade")).toBeTruthy();
  });
});

describe("string matching tests - assert special characters match and do not crash", () => {
  const f = matchStringCaseDiacriticInsensitive;
  test("assert special characters match and do not crash", () => {
    expect(f("+", "C++")).toBeTruthy();
    expect(f("*", "C*")).toBeTruthy();
    expect(f("(", "C(")).toBeTruthy();
    expect(f(")", "C)")).toBeTruthy();
    expect(f("?", "C?")).toBeTruthy();
    expect(f("[", "C[")).toBeTruthy();
    expect(f("]", "C]")).toBeTruthy();
    expect(f("\\", "C\\")).toBeTruthy();
  });
});

describe("enumToOptions tests", () => {
  // enums generated by codegen are alphabetically sorted
  enum Fruit {
    Apples = "APPLES",
    Bananas = "BANANAS",
    DragonFruit = "DRAGON_FRUIT",
  }

  test("it works for strings without sorting", () => {
    const expectedOptions: { value: string | number; label: string }[] = [
      { value: "APPLES", label: "Apples" },
      { value: "BANANAS", label: "Bananas" },
      { value: "DRAGON_FRUIT", label: "DragonFruit" },
    ];
    const actualOptions = enumToOptions(Fruit);
    expect(actualOptions).toEqual(expectedOptions);
  });

  test("it works with a complete sort order", () => {
    const sortOrder = [Fruit.DragonFruit, Fruit.Bananas, Fruit.Apples];
    const expectedOptions: { value: string | number; label: string }[] = [
      { value: "DRAGON_FRUIT", label: "DragonFruit" },
      { value: "BANANAS", label: "Bananas" },
      { value: "APPLES", label: "Apples" },
    ];
    const actualOptions = enumToOptions(Fruit, sortOrder);
    expect(actualOptions).toEqual(expectedOptions);
  });

  test("it works with an incomplete sort order and sends missing entries to the end", () => {
    const sortOrder = [Fruit.DragonFruit, Fruit.Bananas];
    const expectedOptions: { value: string | number; label: string }[] = [
      { value: "DRAGON_FRUIT", label: "DragonFruit" },
      { value: "BANANAS", label: "Bananas" },
      { value: "APPLES", label: "Apples" },
    ];
    const actualOptions = enumToOptions(Fruit, sortOrder);
    expect(actualOptions).toEqual(expectedOptions);
  });
});

describe("countNumberOfWords tests", () => {
  test("should return the zero for empty string", () => {
    const emptyString = "";
    const numOfWords = countNumberOfWords(emptyString);
    expect(numOfWords).toEqual(0);
  });

  test("should return the correct number of words of string with extra white space", () => {
    let textWithWhiteSpace = "  Hello  World!  ";
    let numOfWords = countNumberOfWords(textWithWhiteSpace);
    expect(numOfWords).toEqual(2);
    textWithWhiteSpace = "     ";
    numOfWords = countNumberOfWords(textWithWhiteSpace);
    expect(numOfWords).toEqual(0);
    textWithWhiteSpace = "a p p l e";
    numOfWords = countNumberOfWords(textWithWhiteSpace);
    expect(numOfWords).toEqual(5);
  });

  test("should return the correct number of words of string with numbers and special characters", () => {
    const textWithNumbers = "This243 is a 100.";
    let numOfWords = countNumberOfWords(textWithNumbers);
    expect(numOfWords).toEqual(4);
    const textWithSpecialCharacters = "*(Y$# hello#$# wo$#rld ....)(*";
    numOfWords = countNumberOfWords(textWithSpecialCharacters);
    expect(numOfWords).toEqual(4);
    const textWithBoth = "L34#$# &(*da($# this is a 34^@# sentence.";
    numOfWords = countNumberOfWords(textWithBoth);
    expect(numOfWords).toEqual(7);
  });
});

describe("Alphabetically sorting select and combobox options tests", () => {
  test("should sort array of options alphabetically", () => {
    const convertToOptions = (list: string[]) => {
      return list.map((x) => ({
        label: x,
        value: x,
      }));
    };

    // alphabetical handling of capitalization
    let sortedList = ["Aa", "Bb", "Cc", "Dd", "Ee", "Ff"];

    let unsortedList = ["Dd", "Ee", "Aa", "Bb", "Ff", "Cc"];

    let modifiedList = alphaSortOptions(convertToOptions(unsortedList));
    expect(modifiedList).toStrictEqual(convertToOptions(sortedList));

    // handling of French accented characters
    sortedList = ["à", "ä", "Ç", "é", "É", "ü"];

    unsortedList = ["Ç", "à", "é", "ü", "É", "ä"];

    modifiedList = alphaSortOptions(convertToOptions(unsortedList), "fr");
    expect(modifiedList).toStrictEqual(convertToOptions(sortedList));

    // handling of non-alphanumeric characters
    // Non-alphanumeric sort order: _-,;:!?.'"()@*/\&#%`^<>|~$ (https://support.google.com/drive/thread/150638299?hl=en&msgid=150657957)
    sortedList = [
      "_",
      "-",
      ",",
      ";",
      ":",
      "!",
      "?",
      ".",
      "@",
      "*",
      "&",
      "#",
      "%",
      "~",
      "$",
    ];

    unsortedList = [
      "_",
      ";",
      ":",
      "$",
      "?",
      "!",
      "~",
      ",",
      "-",
      "@",
      "*",
      "%",
      ".",
      "#",
      "&",
    ];

    modifiedList = alphaSortOptions(convertToOptions(unsortedList));
    expect(modifiedList).toStrictEqual(convertToOptions(sortedList));

    // handling all edge cases together
    sortedList = [
      ".NET Programming",
      "~alpha",
      "azure",
      "C#",
      "C++",
      "Database Design & Data Administration",
      "F# or Visual Basic",
      "integrity",
      "python",
      "React",
    ];

    unsortedList = [
      "React",
      "azure",
      ".NET Programming",
      "integrity",
      "~alpha",
      "C#",
      "F# or Visual Basic",
      "python",
      "Database Design & Data Administration",
      "C++",
    ];

    modifiedList = alphaSortOptions(convertToOptions(unsortedList));
    expect(modifiedList).toStrictEqual(convertToOptions(sortedList));
  });
});

describe("Test countNumberOfWordsAfterReplacingHTML()", () => {
  const f = countNumberOfWordsAfterReplacingHTML;

  test("Empty string", () => {
    expect(f("")).toEqual(0);
  });

  test("Regular string", () => {
    expect(f("apples to oranges")).toEqual(3);
  });

  test("Regular string with punctuation and multi spacing", () => {
    expect(f("apples to oranges,  then at last, to   bananas")).toEqual(8);
  });

  test("Simple HTML", () => {
    expect(f("<p>abc</p><p>def</p><p>ghi</p>")).toEqual(3);
  });

  test("Complicated HTML", () => {
    expect(
      f(
        '<p>aaa</p><ul><li><p>item one</p></li><li><p>item two</p></li><li><p>item three</p></li></ul><p>abc</p><p><a target="__self" rel="noopener noreferrer nofollow" href="http://localhost.gov">link</a></p><p><br>the end</p>',
      ),
    ).toEqual(11);
  });
});
