"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A RFC 5321 compliant email."
scalar Email @scalar(class: "MLL\\GraphQLScalars\\Email")

"A phone number string which must comply with E.164 international notation, including country code and preceding '+'."
scalar PhoneNumber

"A human readable ID"
scalar KeyString

type LocalizedString {
    en: String
    fr: String
}

enum Language {
    EN @enum(value: "en")
    FR @enum(value: "fr")
}

enum Role {
    ADMIN
}

type User {
    id: ID!
    email: Email!
    sub: String
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    roles: [Role]
    pools: [Pool] @hasMany # Pools that a user owns
    poolCandidates: [PoolCandidate] @hasMany # Pools candidates that a user owns
}

type Pool {
    id: ID!
    owner: User @belongsTo(relation: "user")
    name: LocalizedString
    key: KeyString
    description: LocalizedString
    classifications: [Classification] @belongsToMany
    assetCriteria: [CmoAsset] @belongsToMany
    essentialCriteria: [CmoAsset] @belongsToMany
    operationalRequirements: [OperationalRequirement] @belongsToMany
    poolCandidates: [PoolCandidate] @hasMany
}

enum PoolCandidateStatus {
    AVAILABLE
    PLACED_INDETERMINATE
    PLACED_TERM
    NO_LONGER_INTERESTED
}

type PoolCandidate {
    id: ID!
    pool: Pool @belongsTo
    user: User @belongsTo

    # cmoIdentifier can be an arbitrary string used to relate this candidate to an external database.
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    # Expiry date for this candidate being in the pool.
    expiryDate: Date @rename(attribute: "expiry_date")

    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")

    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: [OperationalRequirement] @belongsToMany
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: [Classification] @belongsToMany
    cmoAssets: [CmoAsset] @belongsToMany

    status: PoolCandidateStatus @rename(attribute: "pool_candidate_status")
}

enum LanguageAbility {
    ENGLISH
    FRENCH
    BILINGUAL
}

enum WorkRegion {
    TELEWORK
    NATIONAL_CAPITAL
    ATLANTIC
    QUEBEC
    ONTARIO
    PRAIRIE
    BRITISH_COLUMBIA
    NORTH
}

"""
e.g. Overtime as Required, Shift Work, Travel as Required, etc.
"""
type OperationalRequirement {
    id: ID!
    key: KeyString!
    name: LocalizedString!
    description: LocalizedString
}

enum SalaryRange {
    _50_59K
    _60_69K
    _70_79K
    _80_89K
    _90_99K
    _100K_PLUS
}

type Classification {
    id: ID!
    name: LocalizedString
    group: String!
    level: Int!
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

"""
e.g. Application Development, Quality Assurance, Enterprise Architecture, IT Project Management, etc.
"""
type CmoAsset {
    id: ID!
    key: KeyString!
    name: LocalizedString!
    description: LocalizedString
}

type Department {
    id: ID!
    departmentNumber: Int! @rename(attribute: "department_number")
    name: LocalizedString!
}

enum PoolCandidateSearchStatus {
    PENDING
    DONE
}

type PoolCandidateFilter {
    id: ID!
    classifications: [Classification] @belongsToMany
    cmoAssets: [CmoAsset] @belongsToMany
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    isWoman: Boolean @rename(attribute: "is_woman")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    operationalRequirements: [OperationalRequirement] @belongsToMany
    workRegions: [WorkRegion] @rename(attribute: "work_regions")
    pools: [Pool] @belongsToMany
}

type PoolCandidateSearchRequest {
    id: ID!
    fullName: String @rename(attribute: "full_name")
    email: Email
    department: Department @belongsTo
    jobTitle: String @rename(attribute: "job_title")
    additionalComments: String @rename(attribute: "additional_comments")
    poolCandidateFilter: PoolCandidateFilter! @belongsTo
    requestedDate: DateTime @rename(attribute: "created_at")
    status: PoolCandidateSearchStatus
    adminNotes: String @rename(attribute: "admin_notes")
}

input ClassificationFilterInput {
    group: String!
    level: Int!
}

input KeyFilterInput {
    key: KeyString!
}

input PoolFilterInput {
    id: ID!
}

input PoolCandidateFilterInput {
    classifications: [ClassificationFilterInput] @builder(method: "App\\Models\\PoolCandidate@filterByClassifications")
    cmoAssets: [KeyFilterInput] @builder(method: "App\\Models\\PoolCandidate@filterByCmoAssets")
    hasDiploma: Boolean @scope
    hasDisability: Boolean @scope
    isIndigenous: Boolean @scope
    isVisibleMinority: Boolean @scope
    isWoman: Boolean @scope
    languageAbility: LanguageAbility @where(key: "language_ability")
    operationalRequirements: [KeyFilterInput] @builder(method: "App\\Models\\PoolCandidate@filterByOperationalRequirements")
    workRegions: [WorkRegion] @builder(method: "App\\Models\\PoolCandidate@filterByWorkRegions")
    pools: [PoolFilterInput] @builder(method: "App\\Models\\PoolCandidate@filterByPools")
}

type Query {
    me: User @auth
    user(id: ID! @eq): User @find @guard @can(ability: "view", query: true)
    users: [User]! @all @guard @can(ability: "viewAny")
    pool(id: ID! @eq): Pool @find @guard @can(ability: "view", query: true)
    pools: [Pool]! @all @guard @can(ability: "viewAny")
    poolCandidate(id: ID! @eq): PoolCandidate @find @guard @can(ability: "view", query: true)
    poolCandidates: [PoolCandidate]! @all @guard @can(ability: "viewAny")
    # countPoolCandidates returns the number of candidates matching its filters, and requires no special permissions.
    countPoolCandidates(where: PoolCandidateFilterInput): Int! @count(model: "PoolCandidate")
    # searchPoolCandidates returns the actual candidates matching a filter, and requires permissions.
    searchPoolCandidates(where: PoolCandidateFilterInput): [PoolCandidate]! @all @guard @can(ability: "viewAny")
    classification(id: ID! @eq): Classification @find @guard @can(ability: "view", query: true)
    classifications: [Classification]! @all @guard @can(ability: "viewAny")
    operationalRequirement(id: ID! @eq): OperationalRequirement @find @guard @can(ability: "view", query: true)
    operationalRequirements: [OperationalRequirement]! @all @guard @can(ability: "viewAny")
    cmoAsset(id: ID! @eq): CmoAsset @find @guard @can(ability: "view", query: true)
    cmoAssets: [CmoAsset]! @all @guard @can(ability: "viewAny")
    department(id: ID! @eq): Department @find
    departments: [Department]! @all
    poolCandidateFilter(id: ID! @eq): PoolCandidateFilter @find @guard @can(ability: "view", query: true)
    poolCandidateFilters: [PoolCandidateFilter]! @all @guard @can(ability: "viewAny")
    poolCandidateSearchRequest(id: ID! @eq): PoolCandidateSearchRequest @find @guard @can(ability: "view", query: true)
    poolCandidateSearchRequests: [PoolCandidateSearchRequest]! @all @guard @can(ability: "viewAny")
}
"""
When creating a User, name and email are required.
"""
input CreateUserInput {
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    email: Email! @rules(apply: ["unique:users,email"])
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    roles: [Role] = []
}
"""
When updating a User, all fields are optional, and email cannot be changed.
"""
input UpdateUserInput {
    id: ID
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    roles: [Role]
}

input LocalizedStringInput {
    en: String
    fr: String
}

input UserBelongsTo {
    create: CreateUserInput
    connect: ID
    update: UpdateUserInput
}

"""
When updating a PoolCandidate it is possible to update the related user, but not change which user it is related to.
"""
input UpdatePoolCandidateUserBelongsTo {
    update: UpdateUserInput
}

input PoolBelongsTo {
    connect: ID!
}

input CreateClassificationInput {
    name: LocalizedStringInput
    group: String!
    level: Int!
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

input ClassificationBelongsToMany {
    sync: [ID!]
}

input CreateCmoAssetInput {
    key: KeyString!
    name: LocalizedStringInput!
    description: LocalizedStringInput
}

input CmoAssetBelongsToMany {
    sync: [ID!]
}

input CreateOperationalRequirementInput {
    key: KeyString!
    name: LocalizedStringInput!
    description: LocalizedStringInput
}

input OperationalRequirementBelongsToMany {
    sync: [ID!]
}

input CreatePoolCandidateInput {
    pool: PoolBelongsTo!
    user: UserBelongsTo!
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    expiryDate: Date @rename(attribute: "expiry_date")
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: OperationalRequirementBelongsToMany
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: ClassificationBelongsToMany
    cmoAssets: CmoAssetBelongsToMany
    status: PoolCandidateStatus = AVAILABLE @rename(attribute: "pool_candidate_status")
}

input PoolCandidateHasMany {
    create: [CreatePoolCandidateInput!]
}

input CreatePoolInput {
    owner: UserBelongsTo! @rename(attribute: "user")
    name: LocalizedStringInput!
    key: KeyString!
    description: LocalizedStringInput
    classifications: ClassificationBelongsToMany
    assetCriteria: CmoAssetBelongsToMany
    essentialCriteria: CmoAssetBelongsToMany
    operationalRequirements: OperationalRequirementBelongsToMany
}

input UpdateClassificationInput {
    name: LocalizedStringInput
    group: String
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

input UpdateCmoAssetInput {
    name: LocalizedStringInput
    description: LocalizedStringInput
}

input UpdateOperationalRequirementInput {
    name: LocalizedStringInput
    description: LocalizedStringInput
}

input UpdatePoolCandidateInput {
    user: UpdatePoolCandidateUserBelongsTo
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    expiryDate: Date @rename(attribute: "expiry_date")
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: OperationalRequirementBelongsToMany
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: ClassificationBelongsToMany
    cmoAssets: CmoAssetBelongsToMany
    status: PoolCandidateStatus @rename(attribute: "pool_candidate_status")
}

input UpdatePoolInput {
    owner: UserBelongsTo @rename(attribute: "user")
    name: LocalizedStringInput
    description: LocalizedStringInput
    classifications: ClassificationBelongsToMany
    assetCriteria: CmoAssetBelongsToMany
    essentialCriteria: CmoAssetBelongsToMany
    operationalRequirements: OperationalRequirementBelongsToMany
}

input CreateDepartmentInput {
    departmentNumber: Int! @rename(attribute: "department_number")
    name: LocalizedStringInput
}

input UpdateDepartmentInput {
    departmentNumber: Int @rename(attribute: "department_number")
    name: LocalizedStringInput
}

input PoolBelongsToMany {
    sync: [ID!]
}

input DepartmentBelongsTo {
    connect: ID!
}

input CreatePoolCandidateFilterInput {
    classifications: ClassificationBelongsToMany
    cmoAssets: CmoAssetBelongsToMany
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    isWoman: Boolean @rename(attribute: "is_woman")
    languageAbility:LanguageAbility @rename(attribute: "language_ability")
    operationalRequirements: OperationalRequirementBelongsToMany
    workRegions: [WorkRegion] @rename(attribute: "work_regions")
    pools: PoolBelongsToMany
}

input PoolCandidateFilterBelongsTo {
    create: CreatePoolCandidateFilterInput!
}

input CreatePoolCandidateSearchRequestInput {
    fullName: String! @rename(attribute: "full_name")
    email: Email!
    department: DepartmentBelongsTo!
    jobTitle: String! @rename(attribute: "job_title")
    additionalComments: String @rename(attribute: "additional_comments")
    poolCandidateFilter: PoolCandidateFilterBelongsTo!
    # requestedDate will be set to current date in Eloquent model.
    # status will be set to PENDING in Eloquent model.
}

input UpdatePoolCandidateSearchRequestInput {
    adminNotes: String @rename(attribute: "admin_notes")
    status: PoolCandidateSearchStatus
}

type Mutation {
    createUser(user: CreateUserInput! @spread): User @create @guard @can(ability: "create") @copyField(source: "email", target: "sub")
    updateUser(id: ID!, user: UpdateUserInput! @spread): User @update @guard @can(ability: "update", find: "id")
    deleteUser(id: ID!): User @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createPool(pool: CreatePoolInput! @spread): Pool @create @guard @can(ability: "create")
    updatePool(id: ID!, pool: UpdatePoolInput! @spread): Pool @update @guard @can(ability: "update", find: "id")
    deletePool(id: ID!): Pool @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createPoolCandidate(poolCandidate: CreatePoolCandidateInput! @spread): PoolCandidate @create @guard @can(ability: "create")
    updatePoolCandidate(id: ID!, poolCandidate: UpdatePoolCandidateInput! @spread): PoolCandidate @update @guard @can(ability: "update", find: "id")
    deletePoolCandidate(id: ID!): PoolCandidate @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createClassification(classification: CreateClassificationInput! @spread): Classification @create @guard @can(ability: "create")
    updateClassification(id: ID!, classification: UpdateClassificationInput! @spread): Classification @update @guard @can(ability: "update", find: "id")
    deleteClassification(id: ID!): Classification @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createCmoAsset(cmoAsset: CreateCmoAssetInput! @spread): CmoAsset @create @guard @can(ability: "create")
    updateCmoAsset(id: ID!, cmoAsset: UpdateCmoAssetInput! @spread): CmoAsset @update @guard @can(ability: "update", find: "id")
    deleteCmoAsset(id: ID!): CmoAsset @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createOperationalRequirement(operationalRequirement: CreateOperationalRequirementInput! @spread): OperationalRequirement @create @guard @can(ability: "create")
    updateOperationalRequirement(id: ID!, operationalRequirement: UpdateOperationalRequirementInput! @spread): OperationalRequirement @update @guard @can(ability: "update", find: "id")
    deleteOperationalRequirement(id: ID!): OperationalRequirement @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createDepartment(department: CreateDepartmentInput! @spread): Department @create @guard @can(ability: "create")
    updateDepartment(id: ID!, department: UpdateDepartmentInput! @spread): Department @update @can(ability: "update", find: "id")
    deleteDepartment(id: ID!): User @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createPoolCandidateSearchRequest(poolCandidateSearchRequest: CreatePoolCandidateSearchRequestInput! @spread): PoolCandidateSearchRequest @create @can(ability: "create")
    updatePoolCandidateSearchRequest(id: ID!, poolCandidateSearchRequest: UpdatePoolCandidateSearchRequestInput! @spread): PoolCandidateSearchRequest @update @guard @can(ability: "update", find: "id")
}
