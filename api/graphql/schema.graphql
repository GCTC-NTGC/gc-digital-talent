"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A RFC 5321 compliant email."
scalar Email @scalar(class: "MLL\\GraphQLScalars\\Email")

"A phone number string which must comply with E.164 international notation, including country code and preceding '+'."
scalar PhoneNumber

"A human readable ID"
scalar KeyString

type LocalizedString {
    en: String
    fr: String
}

enum Language {
    EN @enum(value: "en")
    FR @enum(value: "fr")
}

enum Role {
    ADMIN
}

type User {
    id: ID!
    sub: String
    roles: [Role]

    # Personal info
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    email: Email!
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    currentProvince: ProvinceOrTerritory @rename(attribute: "current_province")
    currentCity: String @rename(attribute: "current_city")

    # Language
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    lookingForEnglish: Boolean @rename(attribute: "looking_for_english")
    lookingForFrench: Boolean @rename(attribute: "looking_for_french")
    lookingForBilingual: Boolean @rename(attribute: "looking_for_bilingual")
    bilingualEvaluation: BilingualEvaluation
        @rename(attribute: "bilingual_evaluation")
    comprehensionLevel: EvaluatedLanguageAbility
        @rename(attribute: "comprehension_level")
    writtenLevel: EvaluatedLanguageAbility @rename(attribute: "written_level")
    verbalLevel: EvaluatedLanguageAbility @rename(attribute: "verbal_level")
    estimatedLanguageAbility: EstimatedLanguageAbility
        @rename(attribute: "estimated_language_ability")

    # Gov info
    isGovEmployee: Boolean @rename(attribute: "is_gov_employee")
    interestedInLaterOrSecondment: Boolean
        @rename(attribute: "interested_in_later_or_secondment")
    currentClassification: Classification @belongsTo # Users current classification
    # Employment equity
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")

    # Applicant info
    jobLookingStatus: JobLookingStatus @rename(attribute: "job_looking_status")
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    locationExemptions: String @rename(attribute: "location_exemptions")
    acceptedOperationalRequirements: [OperationalRequirement] @rename(attribute: "accepted_operational_requirements")
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: [Classification] @belongsToMany
    wouldAcceptTemporary: Boolean @rename(attribute: "would_accept_temporary")
    cmoAssets: [CmoAsset] @belongsToMany

    # Pool info
    poolCandidates: [PoolCandidate] @hasMany # PoolsCandidate objects associate the user with a pool

    # Experiences
    experiences: [Experience] # All experiences that a user owns
    awardExperiences: [AwardExperience] @hasMany # Award experiences that a user owns
    communityExperiences: [CommunityExperience] @hasMany # Community experiences that a user owns
    educationExperiences: [EducationExperience] @hasMany # Education experiences that a user owns
    personalExperiences: [PersonalExperience] @hasMany # Personal experiences that a user owns
    workExperiences: [WorkExperience] @hasMany # Work experiences that a user owns

    # Pool Manager info
    pools: [Pool] @hasMany # Pools a user owns
}

enum ProvinceOrTerritory {
    BRITISH_COLUMBIA
    ALBERTA
    SASKATCHEWAN
    MANITOBA
    ONTARIO
    QUEBEC
    NEW_BRUNSWICK
    NOVA_SCOTIA
    PRINCE_EDWARD_ISLAND
    NEWFOUNDLAND_AND_LABRADOR
    YUKON
    NORTHWEST_TERRITORIES
    NUNAVUT
}

enum BilingualEvaluation {
    COMPLETED_ENGLISH
    COMPLETED_FRENCH
    NOT_COMPLETED
}

enum EvaluatedLanguageAbility {
    X
    A
    B
    C
    E
    P
}

enum EstimatedLanguageAbility {
    BEGINNER
    INTERMEDIATE
    ADVANCED
}

enum JobLookingStatus {
    ACTIVELY_LOOKING
    OPEN_TO_OPPORTUNITIES
    INACTIVE
}

type Applicant {
    id: ID!

    # Personal info
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    email: Email!
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    currentProvince: ProvinceOrTerritory @rename(attribute: "current_province")
    currentCity: String @rename(attribute: "current_city")

    # Gov info
    isGovEmployee: Boolean @rename(attribute: "is_gov_employee")
    interestedInLaterOrSecondment: Boolean @rename(attribute: "interested_in_later_or_secondment")
    currentClassification: Classification @belongsTo # Users current classification

    # Language
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    lookingForEnglish: Boolean @rename(attribute: "looking_for_english")
    lookingForFrench: Boolean @rename(attribute: "looking_for_french")
    lookingForBilingual: Boolean @rename(attribute: "looking_for_bilingual")
    bilingualEvaluation: BilingualEvaluation @rename(attribute: "bilingual_evaluation")
    comprehensionLevel: EvaluatedLanguageAbility @rename(attribute: "comprehension_level")
    writtenLevel: EvaluatedLanguageAbility @rename(attribute: "written_level")
    verbalLevel: EvaluatedLanguageAbility @rename(attribute: "verbal_level")
    estimatedLanguageAbility: EstimatedLanguageAbility @rename(attribute: "estimated_language_ability")

    # Employment equity
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")

    # Applicant info
    jobLookingStatus: JobLookingStatus @rename(attribute: "job_looking_status")

    hasDiploma: Boolean @rename(attribute: "has_diploma")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    locationExemptions: String @rename(attribute: "location_exemptions")
    acceptedOperationalRequirements: [OperationalRequirement] @rename(attribute: "accepted_operational_requirements")
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: [Classification] @belongsToMany
    wouldAcceptTemporary: Boolean @rename(attribute: "would_accept_temporary")
    cmoAssets: [CmoAsset] @belongsToMany

    # Experiences
    experiences: [Experience]
    awardExperiences: [AwardExperience]
    communityExperiences: [CommunityExperience]
    educationExperiences: [EducationExperience]
    personalExperiences: [PersonalExperience]
    workExperiences: [WorkExperience]
}

type UserPublicProfile {
    id: ID!
    email: Email
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
}

type Pool {
    id: ID!
    owner: UserPublicProfile @belongsTo(relation: "user")
    name: LocalizedString
    key: KeyString
    description: LocalizedString
    classifications: [Classification] @belongsToMany
    assetCriteria: [CmoAsset] @belongsToMany
    essentialCriteria: [CmoAsset] @belongsToMany
    operationalRequirements: [OperationalRequirement] @rename(attribute: "operational_requirements")
    poolCandidates: [PoolCandidate] @hasMany @can(ability: "viewAny")
}

enum PoolCandidateStatus {
    AVAILABLE
    PLACED_INDETERMINATE
    PLACED_TERM
    NO_LONGER_INTERESTED
}

type PoolCandidate {
    id: ID!
    pool: Pool @belongsTo
    user: Applicant @belongsTo(relation: "user")

    # cmoIdentifier can be an arbitrary string used to relate this candidate to an external database.
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    # Expiry date for this candidate being in the pool.
    expiryDate: Date @rename(attribute: "expiry_date")

    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")

    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: [OperationalRequirement] @rename(attribute: "accepted_operational_requirements")
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: [Classification] @belongsToMany
    cmoAssets: [CmoAsset] @belongsToMany

    status: PoolCandidateStatus @rename(attribute: "pool_candidate_status")
}

enum LanguageAbility {
    ENGLISH
    FRENCH
    BILINGUAL
}

enum WorkRegion {
    TELEWORK
    NATIONAL_CAPITAL
    ATLANTIC
    QUEBEC
    ONTARIO
    PRAIRIE
    BRITISH_COLUMBIA
    NORTH
}

"""
e.g. Overtime as Required, Shift Work, Travel as Required, etc.
"""
enum OperationalRequirement {
    SHIFT_WORK
    ON_CALL
    TRAVEL
    TRANSPORT_EQUIPMENT
    DRIVERS_LICENSE
    WORK_WEEKENDS
    OVERTIME_SCHEDULED
    OVERTIME_SHORT_NOTICE
}

enum SalaryRange {
    _50_59K
    _60_69K
    _70_79K
    _80_89K
    _90_99K
    _100K_PLUS
}

type Classification {
    id: ID!
    name: LocalizedString
    group: String!
    level: Int!
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

"""
e.g. Application Development, Quality Assurance, Enterprise Architecture, IT Project Management, etc.
"""
type CmoAsset {
    id: ID!
    key: KeyString!
    name: LocalizedString!
    description: LocalizedString
}

type Department {
    id: ID!
    departmentNumber: Int! @rename(attribute: "department_number")
    name: LocalizedString!
}

enum PoolCandidateSearchStatus {
    PENDING
    DONE
}

type PoolCandidateFilter {
    id: ID!
    classifications: [Classification] @belongsToMany
    cmoAssets: [CmoAsset] @belongsToMany
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    isWoman: Boolean @rename(attribute: "is_woman")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    operationalRequirements: [OperationalRequirement] @rename(attribute: "operational_requirements")
    workRegions: [WorkRegion] @rename(attribute: "work_regions")
    pools: [Pool] @belongsToMany
}

type PoolCandidateSearchRequest {
    id: ID!
    fullName: String @rename(attribute: "full_name")
    email: Email
    department: Department @belongsTo
    jobTitle: String @rename(attribute: "job_title")
    additionalComments: String @rename(attribute: "additional_comments")
    poolCandidateFilter: PoolCandidateFilter! @belongsTo
    requestedDate: DateTime @rename(attribute: "created_at")
    status: PoolCandidateSearchStatus
    adminNotes: String @rename(attribute: "admin_notes")
}

enum SkillCategory {
    TECHNICAL,
    BEHAVIOURAL
}

type SkillFamily {
    id: ID!
    key: KeyString!
    name: LocalizedString!
    description: LocalizedString!
    skills: [Skill!] @belongsToMany
    category: SkillCategory!
}

type Skill {
    id: ID!
    key: KeyString!
    name: LocalizedString!
    description: LocalizedString
    keywords: [String!]
    families: [SkillFamily!] @belongsToMany

    # Experiences
    experiences: [Experience!]
    awardExperiences: [AwardExperience!] @hasMany
    communityExperiences: [CommunityExperience!] @hasMany
    educationExperiences: [EducationExperience!] @hasMany
    personalExperiences: [PersonalExperience!] @hasMany
    workExperiences: [WorkExperience!] @hasMany
    # ExperienceSkillRecord is the pivot data and may only be queried when Skill is nested in an Experience (eg. experience->skill->experienceSkillRecord). Querying for it otherwise will just return null.
    experienceSkillRecord: ExperienceSkillRecord @rename(attribute: "experience_skill_pivot")
}

enum AwardedTo {
    ME
    MY_TEAM
    MY_PROJECT
    MY_ORGANIZATION
}
enum AwardedScope {
    INTERNATIONAL
    NATIONAL
    PROVINCIAL
    LOCAL
    COMMUNITY
    ORGANIZATIONAL
    SUB_ORGANIZATIONAL
}

enum EducationType {
    DIPLOMA
    BACHELORS_DEGREE
    MASTERS_DEGREE
    PHD
    POST_DOCTORAL_FELLOWSHIP
    ONLINE_COURSE
    CERTIFICATION
    OTHER
}
enum EducationStatus {
    SUCCESS_CREDENTIAL
    SUCCESS_NO_CREDENTIAL
    IN_PROGRESS
    AUDITED
    DID_NOT_COMPLETE
}

interface Experience {
    id: ID!
    applicant: Applicant! @belongsTo(relation: "user")
    details: String
    skills: [Skill!] @morphToMany
    # ExperienceSkillRecord is the pivot data and may only be queried when Experience is nested in a Skill (eg. skill->experiences->experienceSkillRecord). Querying for it otherwise will just return null.
    experienceSkillRecord: ExperienceSkillRecord @rename(attribute: "experience_skill_pivot")
}

type WorkExperience implements Experience {
    id: ID!
    applicant: Applicant! @belongsTo(relation: "user")
    role: String
    organization: String
    division: String
    startDate: Date @rename(attribute: "start_date")
    endDate: Date @rename(attribute: "end_date")
    details: String
    skills: [Skill!] @morphToMany
    # ExperienceSkillRecord is the pivot data and may only be queried when Experience is nested in a Skill (eg. skill->experiences->experienceSkillRecord). Querying for it otherwise will just return null.
    experienceSkillRecord: ExperienceSkillRecord @rename(attribute: "experience_skill_pivot")
}
type PersonalExperience implements Experience {
    id: ID!
    applicant: Applicant! @belongsTo(relation: "user")
    title: String
    description: String
    startDate: Date @rename(attribute: "start_date")
    endDate: Date @rename(attribute: "end_date")
    details: String
    skills: [Skill!] @morphToMany
    # ExperienceSkillRecord is the pivot data and may only be queried when Experience is nested in a Skill (eg. skill->experiences->experienceSkillRecord). Querying for it otherwise will just return null.
    experienceSkillRecord: ExperienceSkillRecord @rename(attribute: "experience_skill_pivot")
}
type CommunityExperience implements Experience {
    id: ID!
    applicant: Applicant! @belongsTo(relation: "user")
    title: String
    organization: String
    project: String
    startDate: Date @rename(attribute: "start_date")
    endDate: Date @rename(attribute: "end_date")
    details: String
    skills: [Skill!] @morphToMany
    # ExperienceSkillRecord is the pivot data and must be queried through a nested mutation (eg. experience->skill->experienceSkillRecord) querying for it directly will just return null
    experienceSkillRecord: ExperienceSkillRecord @rename(attribute: "experience_skill_pivot")
}
type EducationExperience implements Experience {
    id: ID!
    applicant: Applicant! @belongsTo(relation: "user")
    institution: String
    areaOfStudy: String @rename(attribute: "area_of_study")
    thesisTitle: String @rename(attribute: "thesis_title")
    startDate: Date @rename(attribute: "start_date")
    endDate: Date @rename(attribute: "end_date")
    type: EducationType
    status: EducationStatus
    details: String
    skills: [Skill!] @morphToMany
    # ExperienceSkillRecord is the pivot data and may only be queried when Experience is nested in a Skill (eg. skill->experiences->experienceSkillRecord). Querying for it otherwise will just return null.
    experienceSkillRecord: ExperienceSkillRecord @rename(attribute: "experience_skill_pivot")
}
type AwardExperience implements Experience {
    id: ID!
    applicant: Applicant! @belongsTo(relation: "user")
    title: String
    issuedBy: String @rename(attribute: "issued_by")
    awardedDate: Date @rename(attribute: "awarded_date")
    awardedTo: AwardedTo @rename(attribute: "awarded_to")
    awardedScope: AwardedScope @rename(attribute: "awarded_scope")
    details: String
    skills: [Skill!] @morphToMany
    # ExperienceSkillRecord is the pivot data and may only be queried when Experience is nested in a Skill (eg. skill->experiences->experienceSkillRecord). Querying for it otherwise will just return null.
    experienceSkillRecord: ExperienceSkillRecord @rename(attribute: "experience_skill_pivot")
}

type ExperienceSkillRecord {
    details: String
}

input ClassificationFilterInput {
    group: String!
    level: Int!
}

input KeyFilterInput {
    key: KeyString!
}

input PoolFilterInput {
    id: ID!
}

input PoolCandidateFilterInput {
    classifications: [ClassificationFilterInput] @builder(method: "App\\Models\\PoolCandidate@filterByClassifications")
    cmoAssets: [KeyFilterInput] @builder(method: "App\\Models\\PoolCandidate@filterByCmoAssets")
    hasDiploma: Boolean @scope
    hasDisability: Boolean @scope
    isIndigenous: Boolean @scope
    isVisibleMinority: Boolean @scope
    isWoman: Boolean @scope
    languageAbility: LanguageAbility @builder(method: "App\\Models\\PoolCandidate@filterByLanguageAbility")
    operationalRequirements: [OperationalRequirement] @builder(method: "App\\Models\\PoolCandidate@filterByOperationalRequirements")
    workRegions: [WorkRegion] @builder(method: "App\\Models\\PoolCandidate@filterByWorkRegions")
    pools: [PoolFilterInput] @builder(method: "App\\Models\\PoolCandidate@filterByPools")
}

type Query {
    me: User @auth
    user(id: ID! @eq): User @find @guard @can(ability: "view", query: true)
    users: [User]! @all @guard @can(ability: "viewAny")
    applicant(id: ID! @eq): Applicant @find(model: "User") @guard @can(ability: "viewApplicant", query: true, model: "User")
    applicants: [Applicant]! @all(model: "User") @guard @can(ability: "viewAnyApplicants", model: "User")
    pool(id: ID! @eq): Pool @find
    poolByKey(key: String! @eq): Pool @find
    pools: [Pool]! @all
    poolCandidate(id: ID! @eq): PoolCandidate @find @guard @can(ability: "view", query: true)
    poolCandidates: [PoolCandidate]! @all @guard @can(ability: "viewAny")
    # countPoolCandidates returns the number of candidates matching its filters, and requires no special permissions.
    countPoolCandidates(where: PoolCandidateFilterInput): Int! @count(model: "PoolCandidate")
    # searchPoolCandidates returns the actual candidates matching a filter, and requires permissions.
    searchPoolCandidates(where: PoolCandidateFilterInput): [PoolCandidate]! @all @guard @can(ability: "viewAny")
    classification(id: ID! @eq): Classification @find
    classifications: [Classification]! @all
    cmoAsset(id: ID! @eq): CmoAsset @find
    cmoAssets: [CmoAsset]! @all
    department(id: ID! @eq): Department @find
    departments: [Department]! @all
    poolCandidateFilter(id: ID! @eq): PoolCandidateFilter @find @guard @can(ability: "view", query: true)
    poolCandidateFilters: [PoolCandidateFilter]! @all @guard @can(ability: "viewAny")
    poolCandidateSearchRequest(id: ID! @eq): PoolCandidateSearchRequest @find @guard @can(ability: "view", query: true)
    poolCandidateSearchRequests: [PoolCandidateSearchRequest]! @all @guard @can(ability: "viewAny")
    skillFamily(id: ID! @eq): SkillFamily @find
    skillFamilies: [SkillFamily]! @all
    skill(id: ID! @eq): Skill @find
    skills: [Skill]! @all
}
input ClassificationBelongsTo {
    connect: ID!
}
input PoolsHasMany {
    create: [CreatePoolInput]
}
"""
When creating a User, name and email are required.
"""
input CreateUserInput {
    sub: String
    roles: [Role] = []

    # Personal info
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    email: Email! @rules(apply: ["unique:users,email"])
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    currentProvince: ProvinceOrTerritory @rename(attribute: "current_province")
    currentCity: String @rename(attribute: "current_city")

    # Language
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    lookingForEnglish: Boolean @rename(attribute: "looking_for_english")
    lookingForFrench: Boolean @rename(attribute: "looking_for_french")
    lookingForBilingual: Boolean @rename(attribute: "looking_for_bilingual")
    bilingualEvaluation: BilingualEvaluation @rename(attribute: "bilingual_evaluation")
    comprehensionLevel: EvaluatedLanguageAbility @rename(attribute: "comprehension_level")
    writtenLevel: EvaluatedLanguageAbility @rename(attribute: "written_level")
    verbalLevel: EvaluatedLanguageAbility @rename(attribute: "verbal_level")
    estimatedLanguageAbility: EstimatedLanguageAbility @rename(attribute: "estimated_language_ability")

    # Gov info
    isGovEmployee: Boolean @rename(attribute: "is_gov_employee")
    interestedInLaterOrSecondment: Boolean @rename(attribute: "interested_in_later_or_secondment")
    currentClassification: ClassificationBelongsTo

    # Employment equity
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")

    # Applicant info
    jobLookingStatus: JobLookingStatus @rename(attribute: "job_looking_status")
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    locationExemptions: String @rename(attribute: "location_exemptions")
    acceptedOperationalRequirements: [OperationalRequirement] @rename(attribute: "accepted_operational_requirements")
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: ClassificationBelongsToMany
    wouldAcceptTemporary: Boolean @rename(attribute: "would_accept_temporary")
    cmoAssets: CmoAssetBelongsToMany

    # Experiences
    workExperiences: WorkExperienceHasMany
    personalExperiences: PersonalExperienceHasMany
    communityExperiences: CommunityExperienceHasMany
    educationExperiences: EducationExperienceHasMany
    awardExperiences: AwardExperienceHasMany
}
"""
When updating a User, all fields are optional, and email cannot be changed.
"""
input UpdateUserAsAdminInput {
    sub: String
    roles: [Role]

    # Personal info
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    currentProvince: ProvinceOrTerritory @rename(attribute: "current_province")
    currentCity: String @rename(attribute: "current_city")

    # Language
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    lookingForEnglish: Boolean @rename(attribute: "looking_for_english")
    lookingForFrench: Boolean @rename(attribute: "looking_for_french")
    lookingForBilingual: Boolean @rename(attribute: "looking_for_bilingual")
    bilingualEvaluation: BilingualEvaluation @rename(attribute: "bilingual_evaluation")
    comprehensionLevel: EvaluatedLanguageAbility @rename(attribute: "comprehension_level")
    writtenLevel: EvaluatedLanguageAbility @rename(attribute: "written_level")
    verbalLevel: EvaluatedLanguageAbility @rename(attribute: "verbal_level")
    estimatedLanguageAbility: EstimatedLanguageAbility @rename(attribute: "estimated_language_ability")

    # Gov info
    isGovEmployee: Boolean @rename(attribute: "is_gov_employee")
    interestedInLaterOrSecondment: Boolean @rename(attribute: "interested_in_later_or_secondment")
    currentClassification: ClassificationBelongsTo

    # Employment equity
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")

    # Applicant info
    jobLookingStatus: JobLookingStatus @rename(attribute: "job_looking_status")

    hasDiploma: Boolean @rename(attribute: "has_diploma")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    locationExemptions: String @rename(attribute: "location_exemptions")
    acceptedOperationalRequirements: [OperationalRequirement] @rename(attribute: "accepted_operational_requirements")
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: ClassificationBelongsToMany
    wouldAcceptTemporary: Boolean @rename(attribute: "would_accept_temporary")
    cmoAssets: CmoAssetBelongsToMany

    # Experiences
    workExperiences: WorkExperienceHasMany
    personalExperiences: PersonalExperienceHasMany
    communityExperiences: CommunityExperienceHasMany
    educationExperiences: EducationExperienceHasMany
    awardExperiences: AwardExperienceHasMany
}

input UpdateUserAsUserInput {
    # Personal info
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    currentProvince: ProvinceOrTerritory @rename(attribute: "current_province")
    currentCity: String @rename(attribute: "current_city")

    # Language
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    lookingForEnglish: Boolean @rename(attribute: "looking_for_english")
    lookingForFrench: Boolean @rename(attribute: "looking_for_french")
    lookingForBilingual: Boolean @rename(attribute: "looking_for_bilingual")
    bilingualEvaluation: BilingualEvaluation @rename(attribute: "bilingual_evaluation")
    comprehensionLevel: EvaluatedLanguageAbility @rename(attribute: "comprehension_level")
    writtenLevel: EvaluatedLanguageAbility @rename(attribute: "written_level")
    verbalLevel: EvaluatedLanguageAbility @rename(attribute: "verbal_level")
    estimatedLanguageAbility: EstimatedLanguageAbility @rename(attribute: "estimated_language_ability")

    # Gov info
    isGovEmployee: Boolean @rename(attribute: "is_gov_employee")
    interestedInLaterOrSecondment: Boolean @rename(attribute: "interested_in_later_or_secondment")
    currentClassification: ClassificationBelongsTo

    # Employment equity
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")

    # Applicant info
    jobLookingStatus: JobLookingStatus @rename(attribute: "job_looking_status")

    hasDiploma: Boolean @rename(attribute: "has_diploma")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    locationExemptions: String @rename(attribute: "location_exemptions")
    acceptedOperationalRequirements: [OperationalRequirement] @rename(attribute: accepted_operational_requirements)
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: ClassificationBelongsToMany
    wouldAcceptTemporary: Boolean @rename(attribute: "would_accept_temporary")
    cmoAssets: CmoAssetBelongsToMany

    # Experiences
    workExperiences: WorkExperienceHasMany
    personalExperiences: PersonalExperienceHasMany
    communityExperiences: CommunityExperienceHasMany
    educationExperiences: EducationExperienceHasMany
    awardExperiences: AwardExperienceHasMany
}

input LocalizedStringInput {
    en: String
    fr: String
}

input UserBelongsTo {
    connect: ID
}

input PoolBelongsTo {
    connect: ID!
}

input CreateClassificationInput {
    name: LocalizedStringInput
    group: String!
    level: Int!
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

input ClassificationBelongsToMany {
    sync: [ID!]
}

input CreateCmoAssetInput {
    key: KeyString!
    name: LocalizedStringInput!
    description: LocalizedStringInput
}

input CmoAssetBelongsToMany {
    sync: [ID!]
}

input ConnectOrCreateBelongsTo {
    connect: ID
    create: CreateUserInput
}

input CreatePoolCandidateAsAdminInput {
    pool: PoolBelongsTo!
    user: ConnectOrCreateBelongsTo! # TODO: This should be switched to UserBelongsTo as soon as possible. Permission to create a PoolCandidate shouldn't imply permission to create a User. See https://github.com/GCTC-NTGC/gc-digital-talent/issues/2356
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    expiryDate: Date @rename(attribute: "expiry_date")
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: [OperationalRequirement] @rename(attribute: "accepted_operational_requirements")
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: ClassificationBelongsToMany
    cmoAssets: CmoAssetBelongsToMany
    status: PoolCandidateStatus = AVAILABLE
        @rename(attribute: "pool_candidate_status")
}

input CreatePoolInput {
    owner: UserBelongsTo! @rename(attribute: "user")
    name: LocalizedStringInput!
    key: KeyString!
    description: LocalizedStringInput
    classifications: ClassificationBelongsToMany
    assetCriteria: CmoAssetBelongsToMany
    essentialCriteria: CmoAssetBelongsToMany
    operationalRequirements: [OperationalRequirement] @rename(attribute: "operational_requirements")
}

input UpdateClassificationInput {
    name: LocalizedStringInput
    group: String
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

input UpdateCmoAssetInput {
    name: LocalizedStringInput
    description: LocalizedStringInput
}

input UpdatePoolCandidateAsAdminInput {
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    expiryDate: Date @rename(attribute: "expiry_date")
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: [OperationalRequirement] @rename(attribute: "accepted_operational_requirements")
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: ClassificationBelongsToMany
    cmoAssets: CmoAssetBelongsToMany
    status: PoolCandidateStatus @rename(attribute: "pool_candidate_status")
}

input UpdatePoolInput {
    owner: UserBelongsTo @rename(attribute: "user")
    name: LocalizedStringInput
    description: LocalizedStringInput
    classifications: ClassificationBelongsToMany
    assetCriteria: CmoAssetBelongsToMany
    essentialCriteria: CmoAssetBelongsToMany
    operationalRequirements: [OperationalRequirement] @rename(attribute: "operational_requirements")
}

input CreateDepartmentInput {
    departmentNumber: Int! @rename(attribute: "department_number")
    name: LocalizedStringInput
}

input UpdateDepartmentInput {
    departmentNumber: Int @rename(attribute: "department_number")
    name: LocalizedStringInput
}

input PoolBelongsToMany {
    sync: [ID!]
}

input DepartmentBelongsTo {
    connect: ID!
}

input CreatePoolCandidateFilterInput {
    classifications: ClassificationBelongsToMany
    cmoAssets: CmoAssetBelongsToMany
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    isWoman: Boolean @rename(attribute: "is_woman")
    languageAbility:LanguageAbility @rename(attribute: "language_ability")
    operationalRequirements: [OperationalRequirement] @rename(attribute: "operational_requirements")
    workRegions: [WorkRegion] @rename(attribute: "work_regions")
    pools: PoolBelongsToMany
}

input PoolCandidateFilterBelongsTo {
    create: CreatePoolCandidateFilterInput!
}

input CreatePoolCandidateSearchRequestInput {
    fullName: String! @rename(attribute: "full_name")
    email: Email!
    department: DepartmentBelongsTo!
    jobTitle: String! @rename(attribute: "job_title")
    additionalComments: String @rename(attribute: "additional_comments")
    poolCandidateFilter: PoolCandidateFilterBelongsTo!
    # requestedDate will be set to current date in Eloquent model.
    # status will be set to PENDING in Eloquent model.
}

input UpdatePoolCandidateSearchRequestInput {
    adminNotes: String @rename(attribute: "admin_notes")
    status: PoolCandidateSearchStatus
}

input SkillBelongsToMany {
    sync: [ID!]
}
input CreateSkillFamilyInput {
    key: KeyString! @rules(apply: ["unique:skill_families,key"])
    name: LocalizedStringInput!
    description: LocalizedStringInput
    skills: SkillBelongsToMany
    category: SkillCategory!
}

input UpdateSkillFamilyInput {
    name: LocalizedStringInput
    description: LocalizedStringInput
    skills: SkillBelongsToMany
    category: SkillCategory
}

input SkillFamilyBelongsToMany {
    sync: [ID!]
}
input CreateSkillInput {
    key: KeyString!
    name: LocalizedStringInput!
    description: LocalizedStringInput
    families: SkillFamilyBelongsToMany
    keywords: [String!]
}

input UpdateSkillInput {
    name: LocalizedStringInput!
    description: LocalizedStringInput
    families: SkillFamilyBelongsToMany
    keywords: [String!]
}

input WorkExperienceInput {
    role: String
    organization: String
    division: String
    startDate: Date @rename(attribute: "start_date")
    endDate: Date @rename(attribute: "end_date")
    details: String
    skills: UpdateExperienceSkills
}
input PersonalExperienceInput {
    title: String
    description: String
    startDate: Date @rename(attribute: "start_date")
    endDate: Date @rename(attribute: "end_date")
    details: String
    skills: UpdateExperienceSkills
}
input CommunityExperienceInput {
    title: String
    organization: String
    project: String
    startDate: Date @rename(attribute: "start_date")
    endDate: Date @rename(attribute: "end_date")
    details: String
    skills: UpdateExperienceSkills
}
input EducationExperienceInput {
    institution: String
    areaOfStudy: String @rename(attribute: "area_of_study")
    thesisTitle: String @rename(attribute: "thesis_title")
    startDate: Date @rename(attribute: "start_date")
    endDate: Date @rename(attribute: "end_date")
    type: EducationType
    status: EducationStatus
    details: String
    skills: UpdateExperienceSkills
}
input AwardExperienceInput {
    title: String
    issuedBy: String @rename(attribute: "issued_by")
    awardedDate: Date @rename(attribute: "awarded_date")
    awardedTo: AwardedTo @rename(attribute: "awarded_to")
    awardedScope: AwardedScope @rename(attribute: "awarded_scope")
    details: String
    skills: UpdateExperienceSkills
}

input UpdateExperienceSkills {
    connect: [ConnectExperienceSkills!]
    sync: [ConnectExperienceSkills!]
}

input ConnectExperienceSkills {
    id: ID!
    details: String
}

input WorkExperienceHasMany {
    create: [WorkExperienceInput!]
}
input PersonalExperienceHasMany {
    create: [PersonalExperienceInput!]
}
input CommunityExperienceHasMany {
    create: [CommunityExperienceInput!]
}
input EducationExperienceHasMany {
    create: [EducationExperienceInput!]
}
input AwardExperienceHasMany {
    create: [AwardExperienceInput!]
}

type Mutation {
    createUser(user: CreateUserInput! @spread): User @create @guard @can(ability: "create")
    updateUserAsUser(id: ID!, user: UpdateUserAsUserInput! @spread): User @update @guard @can(ability: "update", find: "id")
    updateUserAsAdmin(id: ID!, user: UpdateUserAsAdminInput! @spread): User @update @guard @can(ability: "update", find: "id")
    deleteUser(id: ID!): User @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createPool(pool: CreatePoolInput! @spread): Pool @create @guard @can(ability: "create")
    updatePool(id: ID!, pool: UpdatePoolInput! @spread): Pool @update @guard @can(ability: "update", find: "id")
    deletePool(id: ID!): Pool @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createPoolCandidateAsAdmin(poolCandidate: CreatePoolCandidateAsAdminInput! @spread): PoolCandidate @create @guard @can(ability: "create")
    updatePoolCandidateAsAdmin(id: ID!, poolCandidate: UpdatePoolCandidateAsAdminInput! @spread): PoolCandidate @update @guard @can(ability: "update", find: "id")
    deletePoolCandidate(id: ID!): PoolCandidate @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createClassification(classification: CreateClassificationInput! @spread): Classification @create @guard @can(ability: "create")
    updateClassification(id: ID!, classification: UpdateClassificationInput! @spread): Classification @update @guard @can(ability: "update", find: "id")
    deleteClassification(id: ID!): Classification @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createCmoAsset(cmoAsset: CreateCmoAssetInput! @spread): CmoAsset @create @guard @can(ability: "create")
    updateCmoAsset(id: ID!, cmoAsset: UpdateCmoAssetInput! @spread): CmoAsset @update @guard @can(ability: "update", find: "id")
    deleteCmoAsset(id: ID!): CmoAsset @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createDepartment(department: CreateDepartmentInput! @spread): Department @create @guard @can(ability: "create")
    updateDepartment(id: ID!, department: UpdateDepartmentInput! @spread): Department @update @can(ability: "update", find: "id")
    deleteDepartment(id: ID!): Department @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    createPoolCandidateSearchRequest(poolCandidateSearchRequest: CreatePoolCandidateSearchRequestInput! @spread): PoolCandidateSearchRequest @create @can(ability: "create")
    updatePoolCandidateSearchRequest(id: ID!, poolCandidateSearchRequest: UpdatePoolCandidateSearchRequestInput! @spread): PoolCandidateSearchRequest @update @guard @can(ability: "update", find: "id")
    createSkillFamily(skillFamily: CreateSkillFamilyInput! @spread): SkillFamily @create @guard @can(ability: "create")
    updateSkillFamily(id: ID!, skillFamily: UpdateSkillFamilyInput! @spread): SkillFamily @update @guard @can(ability: "update", find: "id")
    createSkill(skill: CreateSkillInput! @spread): Skill @create @guard @can(ability: "create")
    updateSkill(id: ID!, skill: UpdateSkillInput! @spread): Skill @update @guard @can(ability: "update", find: "id")
    createWorkExperience(userId: ID! @rename(attribute: "user_id"), workExperience: WorkExperienceInput! @spread): WorkExperience @create @can(ability: "create", injectArgs: true)
    createPersonalExperience(userId: ID! @rename(attribute: "user_id"), personalExperience: PersonalExperienceInput! @spread): PersonalExperience @create @can(ability: "create", injectArgs: true)
    createCommunityExperience(userId: ID! @rename(attribute: "user_id"), communityExperience: CommunityExperienceInput! @spread): CommunityExperience @create @can(ability: "create", injectArgs: true)
    createEducationExperience(userId: ID! @rename(attribute: "user_id"), educationExperience: EducationExperienceInput! @spread): EducationExperience @create @can(ability: "create", injectArgs: true)
    createAwardExperience(userId: ID! @rename(attribute: "user_id"), awardExperience: AwardExperienceInput! @spread): AwardExperience @create @can(ability: "create", injectArgs: true)
    updateWorkExperience(id: ID!, workExperience: WorkExperienceInput! @spread): WorkExperience @update @guard @can(ability: "update", find: "id")
    updatePersonalExperience(id: ID!, personalExperience: PersonalExperienceInput! @spread): PersonalExperience @update @guard @can(ability: "update", find: "id")
    updateCommunityExperience(id: ID!, communityExperience: CommunityExperienceInput! @spread): CommunityExperience @update @guard @can(ability: "update", find: "id")
    updateEducationExperience(id: ID!, educationExperience: EducationExperienceInput! @spread): EducationExperience @update @guard @can(ability: "update", find: "id")
    updateAwardExperience(id: ID!, awardExperience: AwardExperienceInput! @spread): AwardExperience @update @guard @can(ability: "update", find: "id")
    deleteWorkExperience(id: ID!): WorkExperience @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    deletePersonalExperience(id: ID!): PersonalExperience @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    deleteCommunityExperience(id: ID!): CommunityExperience @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    deleteEducationExperience(id: ID!): EducationExperience @delete(globalId: false) @guard @can(ability: "delete", find: "id")
    deleteAwardExperience(id: ID!): AwardExperience @delete(globalId: false) @guard @can(ability: "delete", find: "id")
}
