type LocalizedArmedForcesStatus {
  value: ArmedForcesStatus!
  label: LocalizedString!
}

type LocalizedAssessmentDecision {
  value: AssessmentDecision!
  label: LocalizedString!
}

type LocalizedAssessmentDecisionLevel {
  value: AssessmentDecisionLevel!
  label: LocalizedString!
}

type LocalizedAssessmentResultJustification {
  value: AssessmentResultJustification!
  label: LocalizedString!
}

type LocalizedAssessmentStepType {
  value: AssessmentStepType!
  label: LocalizedString!
}

type LocalizedAwardedScope {
  value: AwardedScope!
  label: LocalizedString!
}

type LocalizedAwardedTo {
  value: AwardedTo!
  label: LocalizedString!
}

type LocalizedCafEmploymentType {
  value: CafEmploymentType!
  label: LocalizedString!
}

type LocalizedCafForce {
  value: CafForce!
  label: LocalizedString!
}

type LocalizedCafRank {
  value: CafRank!
  label: LocalizedString!
}

type LocalizedCandidateExpiryFilter {
  value: CandidateExpiryFilter!
  label: LocalizedString!
}

type LocalizedCandidateRemovalReason {
  value: CandidateRemovalReason!
  label: LocalizedString!
}

type LocalizedCandidateSuspendedFilter {
  value: CandidateSuspendedFilter!
  label: LocalizedString!
}

type LocalizedCitizenshipStatus {
  value: CitizenshipStatus!
  label: LocalizedString!
}

type LocalizedCourseFormat {
  value: CourseFormat!
  label: LocalizedString!
}

type LocalizedCourseLanguage {
  value: CourseLanguage!
  label: LocalizedString!
}

type LocalizedDeadlineStatus {
  value: DeadlineStatus!
  label: LocalizedString!
}

type LocalizedDevelopmentProgramParticipationStatus {
  value: DevelopmentProgramParticipationStatus!
  label: LocalizedString!
}

type LocalizedEducationRequirementOption {
  value: EducationRequirementOption!
  label: LocalizedString!
}

type LocalizedEducationStatus {
  value: EducationStatus!
  label: LocalizedString!
}

type LocalizedEducationType {
  value: EducationType!
  label: LocalizedString!
}

type LocalizedEmploymentCategory {
  value: EmploymentCategory!
  label: LocalizedString!
}

type LocalizedEstimatedLanguageAbility {
  value: EstimatedLanguageAbility!
  label: LocalizedString!
}

type LocalizedEvaluatedLanguageAbility {
  value: EvaluatedLanguageAbility!
  label: LocalizedString!
}

type LocalizedExecCoaching {
  value: ExecCoaching!
  label: LocalizedString!
}

type LocalizedExternalRoleSeniority {
  value: ExternalRoleSeniority!
  label: LocalizedString!
}

type LocalizedExternalSizeOfOrganization {
  value: ExternalSizeOfOrganization!
  label: LocalizedString!
}

type LocalizedFinalDecision {
  value: FinalDecision!
  label: LocalizedString!
}

type LocalizedGovContractorRoleSeniority {
  value: GovContractorRoleSeniority!
  label: LocalizedString!
}

type LocalizedGovContractorType {
  value: GovContractorType!
  label: LocalizedString!
}

type LocalizedGovEmployeeType {
  value: GovEmployeeType!
  label: LocalizedString!
}

type LocalizedGovPositionType {
  value: GovPositionType!
  label: LocalizedString!
}

type LocalizedIndigenousCommunity {
  value: IndigenousCommunity!
  label: LocalizedString!
}

type LocalizedLanguage {
  value: Language!
  label: LocalizedString!
}

type LocalizedLanguageAbility {
  value: LanguageAbility!
  label: LocalizedString!
}

type LocalizedMentorship {
  value: Mentorship!
  label: LocalizedString!
}

type LocalizedMoveInterest {
  value: MoveInterest!
  label: LocalizedString!
}

type LocalizedOperationalRequirement {
  value: OperationalRequirement!
  label: LocalizedString!
}

type LocalizedOrganizationTypeInterest {
  value: OrganizationTypeInterest!
  label: LocalizedString!
}

type LocalizedPlacementType {
  value: PlacementType!
  label: LocalizedString!
}

type LocalizedPoolAreaOfSelection {
  value: PoolAreaOfSelection!
  label: LocalizedString!
}

type LocalizedPoolCandidateSearchPositionType {
  value: PoolCandidateSearchPositionType!
  label: LocalizedString!
}

type LocalizedPoolCandidateSearchRequestReason {
  value: PoolCandidateSearchRequestReason!
  label: LocalizedString!
}

type LocalizedPoolCandidateSearchStatus {
  value: PoolCandidateSearchStatus!
  label: LocalizedString!
}

type LocalizedPoolCandidateStatus {
  value: PoolCandidateStatus!
  label: LocalizedString!
}

type LocalizedPoolLanguage {
  value: PoolLanguage!
  label: LocalizedString!
}

type LocalizedPoolOpportunityLength {
  value: PoolOpportunityLength!
  label: LocalizedString!
}

type LocalizedPoolSelectionLimitation {
  value: PoolSelectionLimitation!
  label: LocalizedString!
}

type LocalizedPoolSkillType {
  value: PoolSkillType!
  label: LocalizedString!
}

type LocalizedPoolStatus {
  value: PoolStatus!
  label: LocalizedString!
}

type LocalizedPoolStream {
  value: PoolStream!
  label: LocalizedString!
}

type LocalizedPositionDuration {
  value: PositionDuration!
  label: LocalizedString!
}

type LocalizedPriorityWeight {
  value: PriorityWeight!
  label: LocalizedString!
}

type LocalizedProvinceOrTerritory {
  value: ProvinceOrTerritory!
  label: LocalizedString!
}

type LocalizedPublishingGroup {
  value: PublishingGroup!
  label: LocalizedString!
}

type LocalizedSecurityStatus {
  value: SecurityStatus!
  label: LocalizedString!
}

type LocalizedSkillCategory {
  value: SkillCategory!
  label: LocalizedString!
}

type LocalizedSkillLevel {
  value: SkillLevel!
  label: LocalizedString!
}

type LocalizedSupervisoryStatus {
  value: SupervisoryStatus!
  label: LocalizedString!
}

type LocalizedWorkExperienceGovEmployeeType {
  value: WorkExperienceGovEmployeeType!
  label: LocalizedString!
}

type LocalizedWorkRegion {
  value: WorkRegion!
  label: LocalizedString!
}

type Query {
  myAuth: UserAuthInfo
  me: User
  user(
    id: UUID!

    "Allows to filter if trashed elements should be fetched."
    trashed: Trashed
  ): User
  countApplicants(where: ApplicantFilterInput): Int!
  pool(id: UUID!): Pool
  publishedPools(closingAfter: DateTime, publishingGroup: PublishingGroup): [Pool!]!
  pools: [Pool]! @deprecated(reason: "pools is deprecated. Use poolsPaginated instead.")
  poolCandidate(id: UUID!): PoolCandidate
  countPoolCandidatesByPool(where: ApplicantFilterInput): [CandidateSearchPoolResult!]!
  classification(id: UUID!): Classification
  classifications(availableInSearch: Boolean): [Classification]!
  department(id: UUID!): Department
  departments: [Department]!
  jobPosterTemplate(id: UUID!): JobPosterTemplate
  jobPosterTemplates: [JobPosterTemplate!]
  poolCandidateSearchRequest(id: ID!): PoolCandidateSearchRequest
  skillFamily(id: UUID!): SkillFamily
  skillFamilies: [SkillFamily]!
  skill(id: UUID!): Skill
  skills: [Skill]!
  genericJobTitle(id: UUID!): GenericJobTitle
  genericJobTitles: [GenericJobTitle]!
  community(id: UUID!): Community
  communities: [Community]!
  team(id: UUID!): Team
  teams: [Team]!
  roles: [Role]!
  workStreams: [WorkStream]!
  sitewideAnnouncement: SitewideAnnouncement
  trainingOpportunity(id: UUID!): TrainingOpportunity
  localizedEnumStrings(enumName: String!): [LocalizedEnumString!]
  digitalContractingQuestionnaire(id: UUID!): DigitalContractingQuestionnaire
  digitalContractingQuestionnaires: [DigitalContractingQuestionnaire!]!
  departmentSpecificRecruitmentProcessForm(id: UUID!): DepartmentSpecificRecruitmentProcessForm
  departmentSpecificRecruitmentProcessForms: [DepartmentSpecificRecruitmentProcessForm!]!
  usersPaginated(
    where: UserFilterInput
    orderBy: [OrderByClause!]

    "Limits number of fetched items. Maximum allowed value: 1000."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): UserPaginator!
  userPublicProfilesPaginated(
    where: UserPublicProfileFilterInput
    excludeIds: [ID!]
    orderBy: [OrderByClause!]

    "Limits number of fetched items. Maximum allowed value: 1000."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): UserPublicProfilePaginator!
  poolsPaginated(
    includeIds: [UUID!]
    excludeIds: [UUID!]
    where: PoolFilterInput
    orderByPoolBookmarks: PoolBookmarksOrderByInput
    orderByTeamDisplayName: PoolTeamDisplayNameOrderByInput
    orderByWorkStreamName: PoolWorkStreamNameOrderByInput
    orderByColumn: OrderByColumnInput
    orderBy: [QueryPoolsPaginatedOrderByRelationOrderByClause!]

    "Limits number of fetched items. Maximum allowed value: 1000."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): PoolPaginator!
  poolCandidatesPaginated(
    where: PoolCandidateSearchInput
    orderByPoolName: PoolCandidatePoolNameOrderByInput
    orderByClaimVerification: ClaimVerificationSort
    orderBy: [QueryPoolCandidatesPaginatedOrderByRelationOrderByClause!]

    "Limits number of fetched items. Maximum allowed value: 1000."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): PoolCandidateWithSkillCountPaginator!
  poolCandidateSearchRequestsPaginated(
    where: PoolCandidateSearchRequestInput
    orderBy: [OrderByClause!]

    "Limits number of fetched items. Maximum allowed value: 500."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): PoolCandidateSearchRequestPaginator!
  notifications(
    where: NotificationFilterInput
    excludeIds: [UUID!]

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): NotificationPaginator!
  trainingOpportunitiesPaginated(
    where: TrainingOpportunitiesFilterInput
    orderBy: [OrderByClause!]

    "Limits number of fetched items. Maximum allowed value: 1000."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): TrainingOpportunityPaginator!
}

type Mutation {
  createUser(user: CreateUserInput!): User
  updateUserAsUser(id: ID!, user: UpdateUserAsUserInput!): User
  updateUserAsAdmin(id: ID!, user: UpdateUserAsAdminInput!): User
  updateUserSub(updateUserSubInput: UpdateUserSubInput!): UserAuthInfo
  updateUserRoles(updateUserRolesInput: UpdateUserRolesInput!): UserAuthInfo
  updateEmployeeProfile(id: UUID!, employeeProfile: UpdateEmployeeProfileInput!): EmployeeProfile
  createCommunityInterest(communityInterest: CreateCommunityInterestInput!): CommunityInterest
  updateCommunityInterest(id: UUID!, communityInterest: UpdateCommunityInterestInput!): CommunityInterest
  deleteCommunityInterest(id: UUID!): CommunityInterest
  deleteUser(id: ID!): User
  restoreUser(id: ID!): User
  sendUserEmailVerification(emailType: EmailType): User
  verifyUserEmail(emailType: EmailType, code: String!): User
  createPoolCandidateAsAdmin(poolCandidate: CreatePoolCandidateAsAdminInput!): PoolCandidate
  updatePoolCandidateStatus(id: UUID!, poolCandidate: UpdatePoolCandidateStatusInput!): PoolCandidate
  togglePoolCandidateBookmark(id: ID!): Boolean
  updatePoolCandidateClaimVerification(id: UUID!, poolCandidate: UpdatePoolCandidateClaimVerificationInput!): PoolCandidate
  updatePoolCandidateNotes(id: UUID!, notes: String): PoolCandidate
  removeCandidate(id: UUID!, removalReason: CandidateRemovalReason!, removalReasonOther: String): PoolCandidate
  reinstateCandidate(id: UUID!): PoolCandidate
  deletePoolCandidate(id: ID!): PoolCandidate
  qualifyCandidate(id: UUID!, expiryDate: Date!): PoolCandidate
  disqualifyCandidate(id: UUID!, reason: DisqualificationReason!): PoolCandidate
  revertFinalDecision(id: UUID!): PoolCandidate
  placeCandidate(id: UUID!, placeCandidate: PlaceCandidateInput!): PoolCandidate
  revertPlaceCandidate(id: UUID!): PoolCandidate
  createClassification(classification: CreateClassificationInput!): Classification
  updateClassification(id: ID!, classification: UpdateClassificationInput!): Classification
  deleteClassification(id: ID!): Classification
  createDepartment(department: CreateDepartmentInput!): Department
  updateDepartment(id: ID!, department: UpdateDepartmentInput!): Department
  deleteDepartment(id: ID!): Department
  createPoolCandidateSearchRequest(poolCandidateSearchRequest: CreatePoolCandidateSearchRequestInput!): PoolCandidateSearchRequest
  updatePoolCandidateSearchRequest(id: ID!, poolCandidateSearchRequest: UpdatePoolCandidateSearchRequestInput!): PoolCandidateSearchRequest
  deletePoolCandidateSearchRequest(id: ID!): PoolCandidateSearchRequest
  createSkillFamily(skillFamily: CreateSkillFamilyInput!): SkillFamily
  updateSkillFamily(id: ID!, skillFamily: UpdateSkillFamilyInput!): SkillFamily
  createSkill(skill: CreateSkillInput!): Skill
  updateSkill(id: ID!, skill: UpdateSkillInput!): Skill
  deleteSkill(id: UUID!): Skill
  createWorkExperience(userId: ID!, workExperience: WorkExperienceInput!): WorkExperience
  createPersonalExperience(userId: ID!, personalExperience: PersonalExperienceInput!): PersonalExperience
  createCommunityExperience(userId: ID!, communityExperience: CommunityExperienceInput!): CommunityExperience
  createEducationExperience(userId: ID!, educationExperience: EducationExperienceInput!): EducationExperience
  createAwardExperience(userId: ID!, awardExperience: AwardExperienceInput!): AwardExperience
  updateWorkExperience(id: ID!, workExperience: WorkExperienceInput!): WorkExperience
  updatePersonalExperience(id: ID!, personalExperience: PersonalExperienceInput!): PersonalExperience
  updateCommunityExperience(id: ID!, communityExperience: CommunityExperienceInput!): CommunityExperience
  updateEducationExperience(id: ID!, educationExperience: EducationExperienceInput!): EducationExperience
  updateAwardExperience(id: ID!, awardExperience: AwardExperienceInput!): AwardExperience
  deleteWorkExperience(id: ID!): WorkExperience
  deletePersonalExperience(id: ID!): PersonalExperience
  deleteCommunityExperience(id: ID!): CommunityExperience
  deleteEducationExperience(id: ID!): EducationExperience
  deleteAwardExperience(id: ID!): AwardExperience
  createPool(userId: ID!, teamId: ID!, communityId: ID!, pool: CreatePoolInput!): Pool
  duplicatePool(id: ID!, teamId: ID!, pool: DuplicatePoolInput!): Pool
  updatePool(id: ID!, pool: UpdatePoolInput!): Pool
  updatePublishedPool(id: ID!, pool: UpdatePublishedPoolInput!): Pool
  togglePoolUserBookmark(poolId: UUID!): Pool
  createPoolSkill(poolId: ID!, skillId: ID!, poolSkill: CreatePoolSkillInput!): PoolSkill
  updatePoolSkill(id: ID!, poolSkill: UpdatePoolSkillInput!): PoolSkill
  deletePoolSkill(id: ID!): PoolSkill
  publishPool(id: ID!): Pool
  changePoolClosingDate(id: ID!, closingDate: DateTime!): Pool
  closePool(id: ID!, reason: String!): Pool
  deletePool(id: ID!): Pool
  archivePool(id: ID!): Pool
  unarchivePool(id: ID!): Pool
  changeApplicationSuspendedAt(id: ID!, isSuspended: Boolean!): PoolCandidate
  createApplication(userId: ID!, poolId: ID!): PoolCandidate
  deleteApplication(id: ID!): PoolCandidate
  submitApplication(id: ID!, signature: String!): PoolCandidate
  updateApplication(id: ID!, application: UpdateApplicationInput!): PoolCandidate
  createJobPosterTemplate(jobPosterTemplate: CreateJobPosterTemplateInput!): JobPosterTemplate
  updateJobPosterTemplate(jobPosterTemplate: UpdateJobPosterTemplateInput!): JobPosterTemplate
  deleteJobPosterTemplate(id: UUID!): JobPosterTemplate
  createWorkStream(workStream: CreateWorkStreamInput!): WorkStream
  updateWorkStream(id: UUID!, workStream: UpdateWorkStreamInput!): WorkStream
  createTeam(team: CreateTeamInput!): Team
  updateTeam(id: UUID!, team: UpdateTeamInput!): Team
  deleteTeam(id: UUID!): Team
  createCommunity(community: CreateCommunityInput!): Community
  updateCommunity(id: UUID!, community: UpdateCommunityInput!): Community
  markNotificationAsRead(id: UUID!): Notification
  markNotificationAsUnread(id: UUID!): Notification
  deleteNotification(id: UUID!): Notification
  markAllNotificationsAsRead: [Notification]
  updateEnabledNotifications(enabledEmailNotifications: [NotificationFamily], enabledInAppNotifications: [NotificationFamily]): User
  createUserSkill(userId: UUID!, skillId: UUID!, userSkill: CreateUserSkillInput): UserSkill
  updateUserSkill(id: UUID!, userSkill: UpdateUserSkillInput): UserSkill
  updateUserSkillRankings(userId: UUID!, userSkillRanking: UpdateUserSkillRankingsInput!): User
  deleteUserSkill(id: UUID!): UserSkill
  createAssessmentStep(poolId: UUID!, assessmentStep: AssessmentStepInput): AssessmentStep
  updateAssessmentStep(id: UUID!, assessmentStep: AssessmentStepInput): AssessmentStep
  swapAssessmentStepOrder(stepIdA: UUID!, stepIdB: UUID!): [AssessmentStep]
  createOrUpdateScreeningQuestionAssessmentStep(poolId: UUID!, screeningQuestions: [SyncScreeningQuestionsInput], assessmentStep: ScreeningQuestionAssessmentStepInput): Pool
  deleteAssessmentStep(id: UUID!): AssessmentStep
  createAssessmentResult(createAssessmentResult: CreateAssessmentResultInput!): AssessmentResult
  updateAssessmentResult(updateAssessmentResult: UpdateAssessmentResultInput!): AssessmentResult
  deleteAssessmentResult(id: UUID!): AssessmentResult
  updateSitewideAnnouncement(sitewideAnnouncementInput: SitewideAnnouncementInput!): SitewideAnnouncement
  createTrainingOpportunity(createTrainingOpportunity: CreateTrainingOpportunityInput!): TrainingOpportunity
  updateTrainingOpportunity(updateTrainingOpportunity: UpdateTrainingOpportunityInput!): TrainingOpportunity
  downloadPoolCandidatesCsv(ids: [UUID!], where: PoolCandidateSearchInput, withROD: Boolean): Boolean!
  downloadUsersCsv(ids: [UUID!], where: UserFilterInput): Boolean!
  downloadApplicationsZip(ids: [UUID!]!): Boolean!
  downloadPoolCandidatesZip(ids: [UUID!]!, anonymous: Boolean!): Boolean!
  downloadUsersZip(ids: [UUID!]!, anonymous: Boolean!): Boolean!
  downloadUserDoc(id: UUID!, anonymous: Boolean!): String
  downloadPoolCandidateDoc(id: UUID!, anonymous: Boolean!): String
  downloadApplicationDoc(id: UUID!): String
  createDigitalContractingQuestionnaire(digitalContractingQuestionnaire: DigitalContractingQuestionnaireInput!): DigitalContractingQuestionnaire
  updateDigitalContractingQuestionnaire(id: UUID!, digitalContractingQuestionnaire: DigitalContractingQuestionnaireInput!): DigitalContractingQuestionnaire
  deleteDigitalContractingQuestionnaire(id: UUID!): DigitalContractingQuestionnaire
  createDepartmentSpecificRecruitmentProcessForm(departmentSpecificRecruitmentProcessForm: DepartmentSpecificRecruitmentProcessFormInput!): DepartmentSpecificRecruitmentProcessForm
  updateDepartmentSpecificRecruitmentProcessForm(id: UUID!, departmentSpecificRecruitmentProcessForm: DepartmentSpecificRecruitmentProcessFormInput!): DepartmentSpecificRecruitmentProcessForm
  deleteDepartmentSpecificRecruitmentProcessForm(id: UUID!): DepartmentSpecificRecruitmentProcessForm
}

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime

"A RFC 5321 compliant email."
scalar Email

"A phone number string, accepts any string"
scalar PhoneNumber

"A human readable ID"
scalar KeyString

"Arbitrary data encoded in JavaScript Object Notation. See https:\/\/www.json.org."
scalar JSON

"128 bit universally unique identifier (UUID)"
scalar UUID

type LocalizedString {
  en: String
  fr: String
  localized: String
}

type LocalizedEnumString {
  value: String!
  label: LocalizedString!
}

type UserAuthInfo {
  id: UUID!
  sub: String
  roleAssignments: [RoleAssignment]
  createdDate: DateTime
  deletedDate: DateTime
}

type User {
  id: ID!
  createdDate: DateTime
  updatedDate: DateTime
  deletedDate: DateTime
  firstName: String
  lastName: String
  email: Email
  isEmailVerified: Boolean
  telephone: PhoneNumber
  preferredLang: LocalizedLanguage
  preferredLanguageForInterview: LocalizedLanguage
  preferredLanguageForExam: LocalizedLanguage
  currentProvince: LocalizedProvinceOrTerritory
  currentCity: String
  citizenship: LocalizedCitizenshipStatus
  armedForcesStatus: LocalizedArmedForcesStatus
  lookingForEnglish: Boolean
  lookingForFrench: Boolean
  lookingForBilingual: Boolean
  firstOfficialLanguage: LocalizedLanguage
  secondLanguageExamCompleted: Boolean
  secondLanguageExamValidity: Boolean
  comprehensionLevel: LocalizedEvaluatedLanguageAbility
  writtenLevel: LocalizedEvaluatedLanguageAbility
  verbalLevel: LocalizedEvaluatedLanguageAbility
  estimatedLanguageAbility: LocalizedEstimatedLanguageAbility
  isGovEmployee: Boolean
  workEmail: Email
  isWorkEmailVerified: Boolean
  govEmployeeType: LocalizedGovEmployeeType
  currentClassification: Classification
  department: Department
  hasPriorityEntitlement: Boolean
  priorityNumber: String
  isWoman: Boolean
  hasDisability: Boolean
  isVisibleMinority: Boolean
  indigenousCommunities: [LocalizedIndigenousCommunity]
  indigenousDeclarationSignature: String
  hasDiploma: Boolean @deprecated(reason: "hasDiploma to be replaced")
  locationPreferences: [LocalizedWorkRegion]
  locationExemptions: String
  acceptedOperationalRequirements: [LocalizedOperationalRequirement]
  positionDuration: [PositionDuration]
  employeeProfile: EmployeeProfile
  poolCandidates: [PoolCandidate]
  experiences: [Experience]
  awardExperiences: [AwardExperience]
  communityExperiences: [CommunityExperience]
  educationExperiences: [EducationExperience]
  personalExperiences: [PersonalExperience]
  workExperiences: [WorkExperience]
  userSkills(includeSkillIds: [UUID]): [UserSkill]
  topTechnicalSkillsRanking: [UserSkill]
  topBehaviouralSkillsRanking: [UserSkill]
  improveTechnicalSkillsRanking: [UserSkill]
  improveBehaviouralSkillsRanking: [UserSkill]
  isProfileComplete: Boolean
  priorityWeight: Int
  priority: LocalizedPriorityWeight
  authInfo: UserAuthInfo
  enabledEmailNotifications: [NotificationFamily]
  enabledInAppNotifications: [NotificationFamily]
  poolBookmarks: [Pool]
  poolCandidateSearchRequests: [PoolCandidateSearchRequest!]
}

type CommunityInterest {
  id: UUID!
  community: Community!
  workStreams: [WorkStream!]
  jobInterest: Boolean
  trainingInterest: Boolean
  additionalInformation: String
  interestInDevelopmentPrograms: [DevelopmentProgramInterest!]
}

type DevelopmentProgramInterest {
  id: UUID!
  developmentProgram: DevelopmentProgram!
  communityInterest: CommunityInterest!
  participationStatus: DevelopmentProgramParticipationStatus
  completionDate: Date
}

type EmployeeProfile {
  organizationTypeInterest: [LocalizedOrganizationTypeInterest!]
  moveInterest: [LocalizedMoveInterest!]
  mentorshipStatus: [LocalizedMentorship!]
  mentorshipInterest: [LocalizedMentorship!]
  execInterest: Boolean
  execCoachingStatus: [LocalizedExecCoaching!]
  execCoachingInterest: [LocalizedExecCoaching!]
  aboutYou: String
  careerGoals: String
  learningGoals: String
  workStyle: String
  dreamRoleTitle: String
  dreamRoleAdditionalInformation: String
  dreamRoleCommunity: Community
  dreamRoleClassification: Classification
  dreamRoleWorkStream: WorkStream
  dreamRoleDepartments: [Department!]
  communityInterests: [CommunityInterest!]
  userPublicProfile: UserPublicProfile
}

interface Notification {
  id: ID!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TestNotification implements Notification {
  id: ID!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
}

type ApplicationDeadlineApproachingNotification implements Notification {
  id: ID!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  closingDate: Date
  poolName: LocalizedString
  poolId: ID
  poolCandidateId: ID
}

type NewJobPostedNotification implements Notification {
  id: ID!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  poolId: ID
}

type ApplicationStatusChangedNotification implements Notification {
  id: ID!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  poolName: LocalizedString
}

type SystemNotification implements Notification {
  id: ID!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  message: LocalizedString
  href: LocalizedString
}

type UserFileGeneratedNotification implements Notification {
  id: ID!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  fileName: String
}

type UserFileGenerationErrorNotification implements Notification {
  id: ID!
  readAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  fileName: String
}

type UserPublicProfile {
  id: ID!
  email: Email
  firstName: String
  lastName: String
}

type GeneralQuestion {
  id: ID!
  pool: Pool
  question: LocalizedString
  sortOrder: Int
}

type ScreeningQuestion {
  id: ID!
  assessmentStep: AssessmentStep
  question: LocalizedString
  sortOrder: Int
}

interface HasRoleAssignments {
  id: ID!
  roleAssignments: [RoleAssignment!]
  teamIdForRoleAssignment: ID
}

type Pool implements HasRoleAssignments {
  id: ID!
  owner: UserPublicProfile
  team: Team
  community: Community
  name: LocalizedString
  classification: Classification
  operationalRequirements: [LocalizedOperationalRequirement]
  poolCandidates: [PoolCandidate]
  poolCandidatesCount: Int
  keyTasks: LocalizedString
  yourImpact: LocalizedString
  whatToExpect: LocalizedString
  specialNote: LocalizedString
  whatToExpectAdmission: LocalizedString
  aboutUs: LocalizedString
  isRemote: Boolean
  location: LocalizedString
  securityClearance: LocalizedSecurityStatus
  language: LocalizedPoolLanguage
  status: LocalizedPoolStatus
  workStream: WorkStream
  processNumber: String
  publishingGroup: LocalizedPublishingGroup
  opportunityLength: LocalizedPoolOpportunityLength
  createdDate: DateTime
  updatedDate: DateTime
  generalQuestions: [GeneralQuestion]
  screeningQuestions: [ScreeningQuestion]
  closingDate: DateTime
  closingReason: String
  publishedAt: DateTime
  archivedAt: DateTime
  isComplete: Boolean
  assessmentPlanIsComplete: Boolean
  assessmentSteps: [AssessmentStep]
  poolSkills(type: PoolSkillType): [PoolSkill]
  roleAssignments: [RoleAssignment!]
  teamIdForRoleAssignment: ID
  department: Department
  areaOfSelection: LocalizedPoolAreaOfSelection
  selectionLimitations: [LocalizedPoolSelectionLimitation!]
}

type GeneralQuestionResponse {
  id: ID!
  answer: String
  generalQuestion: GeneralQuestion
  poolCandidate: PoolCandidate
}

type ScreeningQuestionResponse {
  id: ID!
  answer: String
  screeningQuestion: ScreeningQuestion
}

type AssessmentStep {
  id: ID!
  pool: Pool
  type: LocalizedAssessmentStepType
  sortOrder: Int
  title: LocalizedString
  poolSkills: [PoolSkill]
  assessmentResults: [AssessmentResult]
  screeningQuestions: [ScreeningQuestion]
}

type AssessmentResult {
  id: ID!
  assessmentStep: AssessmentStep
  poolCandidate: PoolCandidate
  poolSkill: PoolSkill
  assessmentResultType: AssessmentResultType
  assessmentDecision: LocalizedAssessmentDecision
  justifications: [LocalizedAssessmentResultJustification]
  assessmentDecisionLevel: LocalizedAssessmentDecisionLevel
  skillDecisionNotes: String
}

type AssessmentStepDecision {
  step: UUID!
  decision: AssessmentDecision
}

type AssessmentResultStatus {
  assessmentStepStatuses: [AssessmentStepDecision]
  overallAssessmentStatus: OverallAssessmentStatus
  currentStep: Int
}

type PoolSkill {
  id: ID!
  type: LocalizedPoolSkillType
  requiredLevel: SkillLevel
  skill: Skill
  assessmentSteps: [AssessmentStep]
}

type PoolCandidateCategory {
  weight: Int!
  value: PriorityWeight!
  label: LocalizedString!
}

type PoolCandidate {
  id: ID!
  pool: Pool!
  user: User!
  expiryDate: Date
  category: PoolCandidateCategory
  status: LocalizedPoolCandidateStatus
  statusWeight: Int
  notes: String
  archivedAt: DateTime
  submittedAt: DateTime
  suspendedAt: DateTime
  deletedDate: DateTime
  isBookmarked: Boolean
  removedAt: DateTime
  removalReason: LocalizedCandidateRemovalReason
  removalReasonOther: String
  profileSnapshot: JSON
  signature: String
  submittedSteps: [ApplicationStep!]
  generalQuestionResponses: [GeneralQuestionResponse]
  screeningQuestionResponses: [ScreeningQuestionResponse]
  educationRequirementOption: LocalizedEducationRequirementOption
  educationRequirementExperiences: [Experience]
  assessmentResults: [AssessmentResult]
  assessmentStatus: AssessmentResultStatus
  finalDecision: LocalizedFinalDecision
  finalDecisionAt: DateTime
  placedAt: DateTime
  placedDepartment: Department
  veteranVerification: ClaimVerificationResult
  veteranVerificationExpiry: Date
  priorityVerification: ClaimVerificationResult
  priorityVerificationExpiry: Date
}

type PoolCandidateWithSkillCount {
  id: ID!
  poolCandidate: PoolCandidate!
  skillCount: Int
}

type Classification {
  id: ID!
  name: LocalizedString
  group: String!
  level: Int!
  minSalary: Int
  maxSalary: Int
  genericJobTitles: [GenericJobTitle]
}

type GenericJobTitle {
  id: ID!
  key: GenericJobTitleKey!
  name: LocalizedString
  classification: Classification
}

type Department {
  id: ID!
  departmentNumber: Int!
  name: LocalizedString!
  teams: [Team]
  pools: [Pool]
}

type WorkStream {
  id: UUID!
  key: String
  name: LocalizedString
  plainLanguageName: LocalizedString
  community: Community
}

type Community implements HasRoleAssignments {
  id: ID!
  key: String!
  name: LocalizedString
  description: LocalizedString
  mandateAuthority: LocalizedString
  roleAssignments: [RoleAssignment!]
  teamIdForRoleAssignment: ID
  pools: [Pool]
  developmentPrograms: [DevelopmentProgram!]
}

type DevelopmentProgram {
  id: UUID!
  name: LocalizedString
  descriptionForProfile: LocalizedString
  descriptionForNominations: LocalizedString
  community: Community
  eligibleClassifications: [Classification!]
}

type Team implements HasRoleAssignments {
  id: ID!
  name: String!
  displayName: LocalizedString
  description: LocalizedString
  departments: [Department]
  contactEmail: Email
  pools: [Pool]
  teamable: HasRoleAssignments
  roleAssignments: [RoleAssignment!]
  teamIdForRoleAssignment: ID
}

type Role {
  id: ID!
  name: String!
  displayName: LocalizedString
  description: LocalizedString
  isTeamBased: Boolean
  roleAssignments: [RoleAssignment!]
}

type RoleAssignment {
  id: ID!
  role: Role
  teamable: HasRoleAssignments
  team: Team
  user: UserPublicProfile
}

type EquitySelections {
  isWoman: Boolean
  hasDisability: Boolean
  isIndigenous: Boolean
  isVisibleMinority: Boolean
}

input EquitySelectionsInput {
  isWoman: Boolean
  hasDisability: Boolean
  isVisibleMinority: Boolean
  isIndigenous: Boolean
}

type PoolCandidateFilter {
  id: ID!
  classifications: [Classification]
  hasDiploma: Boolean @deprecated(reason: "hasDiploma to be replaced")
  equity: EquitySelections
  languageAbility: LocalizedLanguageAbility
  operationalRequirements: [LocalizedOperationalRequirement]
  workRegions: [LocalizedWorkRegion]
  pools: [Pool]
}

type ApplicantFilter {
  id: ID!
  hasDiploma: Boolean @deprecated(reason: "hasDiploma to be replaced")
  equity: EquitySelections
  languageAbility: LocalizedLanguageAbility
  operationalRequirements: [LocalizedOperationalRequirement]
  locationPreferences: [LocalizedWorkRegion]
  positionDuration: [PositionDuration]
  skills: [Skill]
  qualifiedClassifications: [Classification]
  workStreams: [WorkStream!]
  pools: [Pool]
  community: Community
}

type PoolCandidateSearchRequest {
  id: ID!
  fullName: String
  email: Email
  department: Department
  jobTitle: String
  additionalComments: String
  hrAdvisorEmail: Email
  requestedDate: DateTime
  status: LocalizedPoolCandidateSearchStatus
  statusChangedAt: DateTime
  adminNotes: String
  poolCandidateFilter: PoolCandidateFilter @deprecated(reason: "Replaced by applicantFilter")
  applicantFilter: ApplicantFilter
  wasEmpty: Boolean
  managerJobTitle: String
  positionType: LocalizedPoolCandidateSearchPositionType
  reason: LocalizedPoolCandidateSearchRequestReason
  community: Community
  initialResultCount: Int
}

type SkillFamily {
  id: ID!
  key: KeyString!
  name: LocalizedString
  description: LocalizedString
  skills: [Skill!]
}

type Skill {
  id: ID!
  key: KeyString!
  name: LocalizedString!
  description: LocalizedString
  keywords: SkillKeywords
  category: LocalizedSkillCategory!
  families: [SkillFamily!]
  experienceSkillRecord: ExperienceSkillRecord
}

type UserSkill {
  id: ID!
  user: User!
  skill: Skill!
  skillLevel: SkillLevel
  whenSkillUsed: WhenSkillUsed
  topSkillsRank: Int
  improveSkillsRank: Int
  experiences: [Experience!]
}

type SkillKeywords {
  en: [String!]
  fr: [String!]
}

interface Experience {
  id: ID!
  details: String
  skills: [Skill!]
  experienceSkillRecord: ExperienceSkillRecord
  deletedDate: DateTime
}

type WorkExperience implements Experience {
  id: ID!
  user: User!
  role: String
  organization: String
  division: String
  startDate: Date
  endDate: Date
  details: String
  skills: [Skill!]
  experienceSkillRecord: ExperienceSkillRecord
  deletedDate: DateTime
  employmentCategory: LocalizedEmploymentCategory
  extSizeOfOrganization: LocalizedExternalSizeOfOrganization
  extRoleSeniority: LocalizedExternalRoleSeniority
  govEmploymentType: LocalizedWorkExperienceGovEmployeeType
  govPositionType: LocalizedGovPositionType
  govContractorRoleSeniority: LocalizedGovContractorRoleSeniority
  govContractorType: LocalizedGovContractorType
  contractorFirmAgencyName: String
  cafEmploymentType: LocalizedCafEmploymentType
  cafForce: LocalizedCafForce
  cafRank: LocalizedCafRank
  classification: Classification
  department: Department
}

type PersonalExperience implements Experience {
  id: ID!
  user: User!
  title: String
  description: String
  startDate: Date
  endDate: Date
  details: String
  skills: [Skill!]
  experienceSkillRecord: ExperienceSkillRecord
  deletedDate: DateTime
}

type CommunityExperience implements Experience {
  id: ID!
  user: User!
  title: String
  organization: String
  project: String
  startDate: Date
  endDate: Date
  details: String
  skills: [Skill!]
  experienceSkillRecord: ExperienceSkillRecord
  deletedDate: DateTime
}

type EducationExperience implements Experience {
  id: ID!
  user: User!
  institution: String
  areaOfStudy: String
  thesisTitle: String
  startDate: Date
  endDate: Date
  type: LocalizedEducationType
  status: LocalizedEducationStatus
  details: String
  skills: [Skill!]
  experienceSkillRecord: ExperienceSkillRecord
  deletedDate: DateTime
}

type AwardExperience implements Experience {
  id: ID!
  user: User!
  title: String
  issuedBy: String
  awardedDate: Date
  awardedTo: LocalizedAwardedTo
  awardedScope: LocalizedAwardedScope
  details: String
  skills: [Skill!]
  experienceSkillRecord: ExperienceSkillRecord
  deletedDate: DateTime
}

type ExperienceSkillRecord {
  details: String
}

type JobPosterTemplate {
  id: UUID!
  referenceId: String
  name: LocalizedString
  description: LocalizedString
  supervisoryStatus: LocalizedSupervisoryStatus
  workDescription: LocalizedString
  tasks: LocalizedString
  keywords: LocalizedKeywords
  essentialTechnicalSkillsNotes: LocalizedString
  essentialBehaviouralSkillsNotes: LocalizedString
  nonessentialTechnicalSkillsNotes: LocalizedString
  classification: Classification
  workStream: WorkStream
  skills: [JobPosterTemplateSkill!]
}

type LocalizedKeywords {
  en: [String!]
  fr: [String!]
}

type JobPosterTemplateSkillPivot {
  type: LocalizedPoolSkillType!
  requiredLevel: SkillLevel
}

type JobPosterTemplateSkill {
  id: UUID!
  skill: Skill!
  pivot: JobPosterTemplateSkillPivot
}

input ClassificationFilterInput {
  group: String!
  level: Int!
}

input KeyFilterInput {
  key: KeyString!
}

input IdInput {
  id: ID!
}

input UserPoolFilterInput {
  poolId: ID!
  expiryStatus: CandidateExpiryFilter = ACTIVE
  statuses: [PoolCandidateStatus!]
  suspendedStatus: CandidateSuspendedFilter = ACTIVE
}

input UserFilterInput {
  applicantFilter: ApplicantFilterInput
  poolFilters: [UserPoolFilterInput]
  isProfileComplete: Boolean
  isGovEmployee: Boolean
  telephone: String
  email: String
  workEmail: String
  name: String
  generalSearch: String
  roles: [ID]
  trashed: Trashed
}

input UserPublicProfileFilterInput {
  publicProfileSearch: String
}

input PoolFilterInput {
  generalSearch: String
  name: String
  team: String
  workStreams: [UUID!]
  statuses: [PoolStatus!] = []
  processNumber: String
  publishingGroups: [PublishingGroup!]
  classifications: [ClassificationFilterInput!]
  canAdmin: Boolean
}

input PoolTeamDisplayNameOrderByInput {
  locale: String!
  order: SortOrder!
}

input PoolWorkStreamNameOrderByInput {
  locale: String!
  order: SortOrder!
}

input PoolBookmarksOrderByInput {
  column: String!
  order: SortOrder!
}

input OrderByColumnInput {
  column: String!
  order: SortOrder!
  nulls: NullsOption
}

input ApplicantFilterInput {
  equity: EquitySelectionsInput
  hasDiploma: Boolean @deprecated(reason: "hasDiploma to be replaced")
  languageAbility: LanguageAbility
  locationPreferences: [WorkRegion]
  operationalRequirements: [OperationalRequirement]
  positionDuration: [PositionDuration]
  pools: [IdInput]
  skills: [IdInput]
  skillsIntersectional: [IdInput]
  qualifiedClassifications: [ClassificationFilterInput]
  workStreams: [IdInput]
  community: IdInput
}

input PoolCandidateSearchInput {
  applicantFilter: ApplicantFilterInput
  email: String
  generalSearch: String
  name: String
  notes: String
  isGovEmployee: Boolean
  priorityWeight: [PriorityWeight]
  poolCandidateStatus: [PoolCandidateStatus]
  expiryStatus: CandidateExpiryFilter
  suspendedStatus: CandidateSuspendedFilter
  publishingGroups: [PublishingGroup]
  appliedClassifications: [ClassificationFilterInput]
  processNumber: String
}

input PoolCandidateSearchRequestInput {
  status: [PoolCandidateSearchStatus]
  departments: [ID]
  classifications: [ID]
  workStreams: [UUID]
  fullName: String
  email: String
  id: ID
  jobTitle: String
  additionalComments: String
  hrAdvisorEmail: String
  adminNotes: String
  generalSearch: String
}

input PoolCandidatePoolNameOrderByInput {
  locale: String!
  order: SortOrder!
}

type CandidateSearchPoolResult {
  pool: Pool!
  candidateCount: Int!
}

type SitewideAnnouncement {
  isEnabled: Boolean!
  publishDate: DateTime!
  expiryDate: DateTime!
  title: LocalizedString!
  message: LocalizedString!
}

type TrainingOpportunity {
  id: UUID!
  title: LocalizedString
  courseLanguage: LocalizedCourseLanguage
  registrationDeadline: Date
  registrationDeadlineStatus: LocalizedDeadlineStatus
  trainingStart: Date
  trainingEnd: Date
  description: LocalizedString
  applicationUrl: LocalizedString
  courseFormat: LocalizedCourseFormat
}

input TrainingOpportunitiesFilterInput {
  hidePassedRegistrationDeadline: Boolean
  opportunityLanguage: CourseLanguage
}

input SitewideAnnouncementInput {
  isEnabled: Boolean!
  publishDate: DateTime!
  expiryDate: DateTime!
  title: LocalizedStringInput!
  message: LocalizedStringInput!
}

input ClaimVerificationSort {
  order: SortOrder!
  useBookmark: Boolean
}

input ClassificationBelongsTo {
  connect: ID
  disconnect: Boolean
}

input PoolsHasMany {
  create: [CreatePoolInput]
}

"When creating a User, name is required."
input CreateUserInput {
  sub: String
  firstName: String!
  lastName: String!
  email: Email
  telephone: PhoneNumber
  preferredLang: Language
  preferredLanguageForInterview: Language
  preferredLanguageForExam: Language
  currentProvince: ProvinceOrTerritory
  currentCity: String
  citizenship: CitizenshipStatus
  armedForcesStatus: ArmedForcesStatus
  lookingForEnglish: Boolean
  lookingForFrench: Boolean
  lookingForBilingual: Boolean
  firstOfficialLanguage: Language
  secondLanguageExamCompleted: Boolean
  secondLanguageExamValidity: Boolean
  comprehensionLevel: EvaluatedLanguageAbility
  writtenLevel: EvaluatedLanguageAbility
  verbalLevel: EvaluatedLanguageAbility
  estimatedLanguageAbility: EstimatedLanguageAbility
  isGovEmployee: Boolean
  workEmail: Email
  govEmployeeType: GovEmployeeType
  currentClassification: ClassificationBelongsTo
  department: DepartmentBelongsTo
  hasPriorityEntitlement: Boolean
  priorityNumber: String
  isWoman: Boolean
  hasDisability: Boolean
  isVisibleMinority: Boolean
  indigenousCommunities: [IndigenousCommunity]
  indigenousDeclarationSignature: String
  hasDiploma: Boolean @deprecated(reason: "hasDiploma to be replaced")
  locationPreferences: [WorkRegion]
  locationExemptions: String
  acceptedOperationalRequirements: [OperationalRequirement]
  positionDuration: [PositionDuration]
  workExperiences: WorkExperienceHasMany
  personalExperiences: PersonalExperienceHasMany
  communityExperiences: CommunityExperienceHasMany
  educationExperiences: EducationExperienceHasMany
  awardExperiences: AwardExperienceHasMany
}

"When updating a User, all fields are optional"
input UpdateUserAsAdminInput {
  id: ID
  email: Email
  firstName: String
  lastName: String
  telephone: PhoneNumber
  preferredLang: Language
  preferredLanguageForInterview: Language
  preferredLanguageForExam: Language
  currentProvince: ProvinceOrTerritory
  currentCity: String
  citizenship: CitizenshipStatus
  armedForcesStatus: ArmedForcesStatus
  lookingForEnglish: Boolean
  lookingForFrench: Boolean
  lookingForBilingual: Boolean
  firstOfficialLanguage: Language
  secondLanguageExamCompleted: Boolean
  secondLanguageExamValidity: Boolean
  comprehensionLevel: EvaluatedLanguageAbility
  writtenLevel: EvaluatedLanguageAbility
  verbalLevel: EvaluatedLanguageAbility
  estimatedLanguageAbility: EstimatedLanguageAbility
  isGovEmployee: Boolean
  workEmail: Email
  govEmployeeType: GovEmployeeType
  currentClassification: ClassificationBelongsTo
  department: DepartmentBelongsTo
  hasPriorityEntitlement: Boolean
  priorityNumber: String
  isWoman: Boolean
  hasDisability: Boolean
  isVisibleMinority: Boolean
  indigenousCommunities: [IndigenousCommunity]
  indigenousDeclarationSignature: String
  hasDiploma: Boolean @deprecated(reason: "hasDiploma to be replaced")
  locationPreferences: [WorkRegion]
  locationExemptions: String
  acceptedOperationalRequirements: [OperationalRequirement]
  positionDuration: [PositionDuration]
  workExperiences: WorkExperienceHasMany
  personalExperiences: PersonalExperienceHasMany
  communityExperiences: CommunityExperienceHasMany
  educationExperiences: EducationExperienceHasMany
  awardExperiences: AwardExperienceHasMany
}

input UpdateUserSubInput {
  userId: UUID!
  sub: String!
}

input UpdateUserRolesInput {
  userId: UUID!
  roleAssignmentsInput: RoleAssignmentHasMany!
}

input UpdateUserAsUserInput {
  id: ID
  email: Email
  firstName: String
  lastName: String
  telephone: PhoneNumber
  preferredLang: Language
  preferredLanguageForInterview: Language
  preferredLanguageForExam: Language
  currentProvince: ProvinceOrTerritory
  currentCity: String
  citizenship: CitizenshipStatus
  armedForcesStatus: ArmedForcesStatus
  lookingForEnglish: Boolean
  lookingForFrench: Boolean
  lookingForBilingual: Boolean
  firstOfficialLanguage: Language
  secondLanguageExamCompleted: Boolean
  secondLanguageExamValidity: Boolean
  comprehensionLevel: EvaluatedLanguageAbility
  writtenLevel: EvaluatedLanguageAbility
  verbalLevel: EvaluatedLanguageAbility
  estimatedLanguageAbility: EstimatedLanguageAbility
  isGovEmployee: Boolean
  workEmail: Email
  govEmployeeType: GovEmployeeType
  currentClassification: ClassificationBelongsTo
  department: DepartmentBelongsTo
  hasPriorityEntitlement: Boolean
  priorityNumber: String
  isWoman: Boolean
  hasDisability: Boolean
  isVisibleMinority: Boolean
  indigenousCommunities: [IndigenousCommunity]
  indigenousDeclarationSignature: String
  hasDiploma: Boolean @deprecated(reason: "hasDiploma to be replaced")
  locationPreferences: [WorkRegion]
  locationExemptions: String
  acceptedOperationalRequirements: [OperationalRequirement]
  positionDuration: [PositionDuration]
  workExperiences: WorkExperienceHasMany
  personalExperiences: PersonalExperienceHasMany
  communityExperiences: CommunityExperienceHasMany
  educationExperiences: EducationExperienceHasMany
  awardExperiences: AwardExperienceHasMany
}

input UpdateEmployeeProfileInput {
  organizationTypeInterest: [OrganizationTypeInterest!]
  moveInterest: [MoveInterest!]
  mentorshipStatus: [Mentorship!]
  mentorshipInterest: [Mentorship!]
  execInterest: Boolean
  execCoachingStatus: [ExecCoaching!]
  execCoachingInterest: [ExecCoaching!]
  aboutYou: String
  careerGoals: String
  learningGoals: String
  workStyle: String
  dreamRoleTitle: String
  dreamRoleAdditionalInformation: String
  dreamRoleCommunity: CommunityBelongsTo
  dreamRoleClassification: ClassificationBelongsTo
  dreamRoleWorkStream: WorkStreamBelongsTo
  dreamRoleDepartments: DepartmentBelongsToMany
}

input CreateCommunityInterestInput {
  userId: UUID!
  community: CommunityBelongsTo!
  workStreams: WorkStreamBelongsToMany
  jobInterest: Boolean
  trainingInterest: Boolean
  additionalInformation: String
  interestInDevelopmentPrograms: CreateDevelopmentProgramInterestHasMany
}

input UpdateCommunityInterestInput {
  workStreams: WorkStreamBelongsToMany
  jobInterest: Boolean
  trainingInterest: Boolean
  additionalInformation: String
  interestInDevelopmentPrograms: UpdateDevelopmentProgramInterestHasMany
}

input CreateDevelopmentProgramInterestHasMany {
  create: [CreateDevelopmentProgramInterestInput!]
}

input UpdateDevelopmentProgramInterestHasMany {
  create: [CreateDevelopmentProgramInterestInput!]
  update: [UpdateDevelopmentProgramInterestInput!]
  delete: [UUID!]
}

input CreateDevelopmentProgramInterestInput {
  developmentProgramId: UUID!
  participationStatus: DevelopmentProgramParticipationStatus
  completionDate: Date
}

input UpdateDevelopmentProgramInterestInput {
  id: UUID!
  participationStatus: DevelopmentProgramParticipationStatus
  completionDate: Date
}

input LocalizedStringInput {
  en: String
  fr: String
}

input UserBelongsTo {
  connect: ID
}

input PoolBelongsTo {
  connect: ID!
}

input TeamBelongsTo {
  connect: ID!
}

input CreateClassificationInput {
  name: LocalizedStringInput
  group: String!
  level: Int!
  minSalary: Int
  maxSalary: Int
}

input ClassificationBelongsToMany {
  sync: [ID!]
}

input CreatePoolCandidateAsAdminInput {
  pool: PoolBelongsTo!
  user: UserBelongsTo!
  expiryDate: Date
  status: PoolCandidateStatus = NEW_APPLICATION
  notes: String
  isBookmarked: Boolean
}

input UpdateClassificationInput {
  name: LocalizedStringInput
  group: String
  minSalary: Int
  maxSalary: Int
}

input UpdatePoolCandidateStatusInput {
  expiryDate: Date
  status: PoolCandidateStatus
}

input UpdatePoolCandidateClaimVerificationInput {
  veteranVerification: ClaimVerificationResult
  veteranVerificationExpiry: Date
  priorityVerification: ClaimVerificationResult
  priorityVerificationExpiry: Date
}

input PlaceCandidateInput {
  placementType: PlacementType!
  departmentId: UUID!
}

input CreateDepartmentInput {
  departmentNumber: Int!
  name: LocalizedStringInput
}

input UpdateDepartmentInput {
  departmentNumber: Int
  name: LocalizedStringInput
}

input DepartmentBelongsTo {
  connect: ID
  disconnect: Boolean
}

input DepartmentBelongsToMany {
  sync: [ID!]
}

input CreateWorkStreamInput {
  key: String
  name: LocalizedStringInput!
  plainLanguageName: LocalizedStringInput
  community: CommunityBelongsTo!
}

input UpdateWorkStreamInput {
  key: String
  name: LocalizedStringInput
  plainLanguageName: LocalizedStringInput
  community: CommunityBelongsTo
}

input WorkStreamBelongsTo {
  connect: ID
  disconnect: Boolean
}

input WorkStreamBelongsToMany {
  sync: [ID!]
}

input PoolBelongsToMany {
  sync: [ID!]
}

input CommunityBelongsTo {
  connect: UUID!
}

input CreateTeamInput {
  name: String!
  displayName: LocalizedStringInput
  description: LocalizedStringInput
  departments: DepartmentBelongsToMany
  contactEmail: Email
}

input UpdateTeamInput {
  name: String
  displayName: LocalizedStringInput
  description: LocalizedStringInput
  departments: DepartmentBelongsToMany
  contactEmail: Email
}

input CreateCommunityInput {
  key: String!
  name: LocalizedStringInput
  description: LocalizedStringInput
  mandateAuthority: LocalizedStringInput
}

input UpdateCommunityInput {
  key: String
  name: LocalizedStringInput
  description: LocalizedStringInput
  mandateAuthority: LocalizedStringInput
}

input CreateApplicantFilterInput {
  hasDiploma: Boolean @deprecated(reason: "hasDiploma to be replaced")
  equity: EquitySelectionsInput
  languageAbility: LanguageAbility
  operationalRequirements: [OperationalRequirement]
  locationPreferences: [WorkRegion]
  positionDuration: [PositionDuration]
  skills: SkillBelongsToMany
  pools: PoolBelongsToMany
  citizenship: CitizenshipStatus
  armedForcesStatus: ArmedForcesStatus
  qualifiedClassifications: ClassificationBelongsToMany
  workStreams: WorkStreamBelongsToMany
  community: CommunityBelongsTo
}

input ApplicantFilterBelongsTo {
  create: CreateApplicantFilterInput!
}

input CreatePoolCandidateSearchRequestInput {
  fullName: String!
  email: Email!
  department: DepartmentBelongsTo!
  community: CommunityBelongsTo!
  jobTitle: String!
  additionalComments: String
  hrAdvisorEmail: Email
  applicantFilter: ApplicantFilterBelongsTo!
  wasEmpty: Boolean
  managerJobTitle: String!
  positionType: PoolCandidateSearchPositionType!
  reason: PoolCandidateSearchRequestReason!
  initialResultCount: Int
}

input UpdatePoolCandidateSearchRequestInput {
  adminNotes: String
  status: PoolCandidateSearchStatus
}

input SkillBelongsToMany {
  sync: [ID!]
}

input SkillBelongsTo {
  connect: ID!
}

input CreateSkillFamilyInput {
  key: KeyString!
  name: LocalizedStringInput!
  description: LocalizedStringInput
  skills: SkillBelongsToMany
}

input UpdateSkillFamilyInput {
  name: LocalizedStringInput
  description: LocalizedStringInput
  skills: SkillBelongsToMany
}

input SkillFamilyBelongsToMany {
  sync: [ID!]
}

input SkillKeywordsInput {
  en: [String!]
  fr: [String!]
}

input CreateSkillInput {
  key: KeyString!
  name: LocalizedStringInput!
  description: LocalizedStringInput
  families: SkillFamilyBelongsToMany
  keywords: SkillKeywordsInput
  category: SkillCategory!
}

input UpdateSkillInput {
  name: LocalizedStringInput!
  description: LocalizedStringInput
  families: SkillFamilyBelongsToMany
  keywords: SkillKeywordsInput
  category: SkillCategory
}

input WorkExperienceInput {
  role: String
  organization: String
  division: String
  startDate: Date
  endDate: Date
  details: String
  skills: UpdateExperienceSkills
  employmentCategory: EmploymentCategory
  extSizeOfOrganization: ExternalSizeOfOrganization
  extRoleSeniority: ExternalRoleSeniority
  govEmploymentType: WorkExperienceGovEmployeeType
  govPositionType: GovPositionType
  govContractorRoleSeniority: GovContractorRoleSeniority
  govContractorType: GovContractorType
  cafEmploymentType: CafEmploymentType
  contractorFirmAgencyName: String
  cafForce: CafForce
  cafRank: CafRank
  classificationId: String
  departmentId: String
}

input PersonalExperienceInput {
  title: String
  description: String
  startDate: Date
  endDate: Date
  details: String
  skills: UpdateExperienceSkills
}

input CommunityExperienceInput {
  title: String
  organization: String
  project: String
  startDate: Date
  endDate: Date
  details: String
  skills: UpdateExperienceSkills
}

input EducationExperienceInput {
  institution: String
  areaOfStudy: String
  thesisTitle: String
  startDate: Date
  endDate: Date
  type: EducationType
  status: EducationStatus
  details: String
  skills: UpdateExperienceSkills
}

input AwardExperienceInput {
  title: String
  issuedBy: String
  awardedDate: Date
  awardedTo: AwardedTo
  awardedScope: AwardedScope
  details: String
  skills: UpdateExperienceSkills
}

input UpdateExperienceSkills {
  connect: [ConnectExperienceSkills!]
  update: [ConnectExperienceSkills!]
  disconnect: [ID!]
  sync: [ConnectExperienceSkills!]
}

input ConnectExperienceSkills {
  id: ID!
  details: String
}

input CreateUserSkillInput {
  skillLevel: SkillLevel
  whenSkillUsed: WhenSkillUsed
}

input UpdateUserSkillInput {
  skillLevel: SkillLevel
  whenSkillUsed: WhenSkillUsed
}

input UpdateUserSkillRankingsInput {
  topTechnicalSkillsRanked: [UUID]
  topBehaviouralSkillsRanked: [UUID]
  improveTechnicalSkillsRanked: [UUID]
  improveBehaviouralSkillsRanked: [UUID]
}

input WorkExperienceHasMany {
  create: [WorkExperienceInput!]
}

input PersonalExperienceHasMany {
  create: [PersonalExperienceInput!]
}

input CommunityExperienceHasMany {
  create: [CommunityExperienceInput!]
}

input EducationExperienceHasMany {
  create: [EducationExperienceInput!]
}

input AwardExperienceHasMany {
  create: [AwardExperienceInput!]
}

input GenericJobTitleBelongsToMany {
  sync: [ID!]
}

input CreatePoolInput {
  classification: ClassificationBelongsTo
  department: DepartmentBelongsTo!
}

input DuplicatePoolInput {
  departmentId: ID
}

input CreateGeneralQuestionInput {
  question: LocalizedStringInput!
  sortOrder: Int
}

input UpdateGeneralQuestionInput {
  id: ID!
  question: LocalizedStringInput
  sortOrder: Int
}

input UpdateGeneralQuestionsHasMany {
  create: [CreateGeneralQuestionInput!]
  update: [UpdateGeneralQuestionInput!]
  delete: [ID!]
}

input SyncScreeningQuestionsInput {
  id: ID
  question: LocalizedStringInput!
  sortOrder: Int
}

input UpdatePoolInput {
  name: LocalizedStringInput
  classification: ClassificationBelongsTo
  department: DepartmentBelongsTo
  workStream: WorkStreamBelongsTo
  processNumber: String
  closingDate: DateTime
  closingReason: String
  yourImpact: LocalizedStringInput
  keyTasks: LocalizedStringInput
  whatToExpect: LocalizedStringInput
  specialNote: LocalizedStringInput
  whatToExpectAdmission: LocalizedStringInput
  aboutUs: LocalizedStringInput
  language: PoolLanguage
  securityClearance: SecurityStatus
  location: LocalizedStringInput
  isRemote: Boolean
  publishingGroup: PublishingGroup
  opportunityLength: PoolOpportunityLength
  generalQuestions: UpdateGeneralQuestionsHasMany
  areaOfSelection: PoolAreaOfSelection
  selectionLimitations: [PoolSelectionLimitation!]
}

input UpdatePublishedPoolInput {
  changeJustification: String!
  yourImpact: LocalizedStringInput
  keyTasks: LocalizedStringInput
  whatToExpect: LocalizedStringInput
  specialNote: LocalizedStringInput
  whatToExpectAdmission: LocalizedStringInput
  aboutUs: LocalizedStringInput
}

input CreatePoolSkillInput {
  type: PoolSkillType!
  requiredLevel: SkillLevel
}

input UpdatePoolSkillInput {
  requiredLevel: SkillLevel
}

input AssessmentStepInput {
  type: AssessmentStepType
  title: LocalizedStringInput
  poolSkills: PoolSkillBelongsToMany
}

input ScreeningQuestionAssessmentStepInput {
  title: LocalizedStringInput
  poolSkills: PoolSkillBelongsToMany
}

input CreateAssessmentResultInput {
  assessmentStepId: UUID!
  poolCandidateId: UUID!
  poolSkillId: UUID
  assessmentResultType: AssessmentResultType
  assessmentDecision: AssessmentDecision
  justifications: [AssessmentResultJustification]
  assessmentDecisionLevel: AssessmentDecisionLevel
  skillDecisionNotes: String
}

input UpdateAssessmentResultInput {
  id: UUID!
  assessmentResultType: AssessmentResultType
  assessmentDecision: AssessmentDecision
  justifications: [AssessmentResultJustification]
  assessmentDecisionLevel: AssessmentDecisionLevel
  skillDecisionNotes: String
}

input CreateTrainingOpportunityInput {
  title: LocalizedStringInput!
  courseLanguage: CourseLanguage!
  registrationDeadline: Date!
  trainingStart: Date!
  trainingEnd: Date
  description: LocalizedStringInput!
  applicationUrl: LocalizedStringInput!
  courseFormat: CourseFormat!
}

input UpdateTrainingOpportunityInput {
  id: UUID!
  title: LocalizedStringInput
  courseLanguage: CourseLanguage
  registrationDeadline: Date
  trainingStart: Date
  trainingEnd: Date
  description: LocalizedStringInput
  applicationUrl: LocalizedStringInput
  courseFormat: CourseFormat
}

input PoolSkillBelongsToMany {
  sync: [UUID!]!
}

input RoleInput {
  roleId: ID!
  teamId: ID
}

input RoleAssignmentHasMany {
  attach: [RoleInput]
  detach: [RoleInput]
}

input RolesForTeamInput {
  roles: [ID!]
}

input RolesForTeamHasMany {
  attach: RolesForTeamInput
  detach: RolesForTeamInput
  sync: RolesForTeamInput
}

input GeneralResponseBelongsTo {
  connect: ID!
}

input CreateGeneralQuestionResponseInput {
  generalQuestion: GeneralResponseBelongsTo!
  answer: String!
}

input UpdateGeneralQuestionResponseInput {
  id: ID!
  answer: String
}

input UpdateGeneralQuestionResponsesHasMany {
  create: [CreateGeneralQuestionResponseInput!]
  update: [UpdateGeneralQuestionResponseInput!]
  delete: [ID!]
}

input ScreeningResponseBelongsTo {
  connect: ID!
}

input CreateScreeningQuestionResponseInput {
  screeningQuestion: ScreeningResponseBelongsTo!
  answer: String!
}

input UpdateScreeningQuestionResponseInput {
  id: ID!
  answer: String
}

input UpdateScreeningQuestionResponsesHasMany {
  create: [CreateScreeningQuestionResponseInput!]
  update: [UpdateScreeningQuestionResponseInput!]
  delete: [ID!]
}

input UpdateEducationExperiencesRequirementBelongsToMany {
  sync: [ID!]
}

input UpdateApplicationInput {
  insertSubmittedStep: ApplicationStep
  generalQuestionResponses: UpdateGeneralQuestionResponsesHasMany
  screeningQuestionResponses: UpdateScreeningQuestionResponsesHasMany
  educationRequirementOption: EducationRequirementOption
  educationRequirementExperiences: UpdateEducationExperiencesRequirementBelongsToMany
  applicationId: ID
}

input DateRange {
  from: DateTime!
  to: DateTime!
}

input LocalizedKeywordsInput {
  en: [String!]
  fr: [String!]
}

input NotificationFilterInput {
  onlyUnread: Boolean
  readAt: DateRange
  createdAt: DateRange
}

input ConnectJobPosterTemplateSkillInput {
  id: UUID!
  type: PoolSkillType!
  requiredLevel: SkillLevel
}

input SyncJobPosterTemplateSkillInput {
  id: UUID!
  type: PoolSkillType
  requiredLevel: SkillLevel
}

input UpdateJobPosterTemplateSkillsInput {
  connect: [ConnectJobPosterTemplateSkillInput!]
  sync: [SyncJobPosterTemplateSkillInput!]
  detach: [UUID!]
}

input CreateJobPosterTemplateInput {
  referenceId: String!
  name: LocalizedStringInput!
  description: LocalizedStringInput!
  supervisoryStatus: SupervisoryStatus!
  stream: PoolStream!
  workStream: WorkStreamBelongsTo!
  workDescription: LocalizedStringInput
  tasks: LocalizedStringInput!
  keywords: LocalizedKeywordsInput
  essentialTechnicalSkillsNotes: LocalizedStringInput
  essentialBehaviouralSkillsNotes: LocalizedStringInput
  nonessentialTechnicalSkillsNotes: LocalizedStringInput
  classification: ClassificationBelongsTo!
  skills: UpdateJobPosterTemplateSkillsInput
}

input UpdateJobPosterTemplateInput {
  id: UUID!
  referenceId: String
  name: LocalizedStringInput
  description: LocalizedStringInput
  supervisoryStatus: SupervisoryStatus
  workStream: WorkStreamBelongsTo
  workDescription: LocalizedStringInput
  tasks: LocalizedStringInput
  keywords: LocalizedStringInput
  essentialTechnicalSkillsNotes: LocalizedStringInput
  essentialBehaviouralSkillsNotes: LocalizedStringInput
  nonessentialTechnicalSkillsNotes: LocalizedStringInput
  classification: ClassificationBelongsTo
  skills: UpdateJobPosterTemplateSkillsInput
}

type DigitalContractingPersonnelSkill {
  id: UUID!
  skill: Skill
  level: SkillLevel
}

type DigitalContractingPersonnelRequirement {
  id: UUID!
  resourceType: String
  skillRequirements: [DigitalContractingPersonnelSkill!]
  language: PersonnelLanguage
  languageOther: String
  security: PersonnelScreeningLevel
  securityOther: String
  telework: PersonnelTeleworkOption
  quantity: Int
}

type DigitalContractingQuestionnaire {
  id: UUID!
  department: Department
  departmentOther: String
  branchOther: String
  businessOwnerName: String
  businessOwnerJobTitle: String
  businessOwnerEmail: String
  financialAuthorityName: String
  financialAuthorityJobTitle: String
  financialAuthorityEmail: String
  authoritiesInvolved: [ContractAuthority!]
  authorityInvolvedOther: String
  contractBehalfOfGc: YesNoUnsure
  contractServiceOfGc: YesNoUnsure
  contractForDigitalInitiative: YesNoUnsure
  digitalInitiativeName: String
  digitalInitiativePlanSubmitted: YesNoUnsure
  digitalInitiativePlanUpdated: YesNoUnsure
  digitalInitiativePlanComplemented: YesNoUnsure
  contractTitle: String
  contractStartDate: Date
  contractEndDate: Date
  contractExtendable: YesNo
  contractAmendable: YesNo
  contractMultiyear: YesNo
  contractValue: ContractValueRange
  contractFtes: ContractFteRange
  contractResourcesStartTimeframe: ContractStartTimeframe
  commodityType: ContractCommodity
  commodityTypeOther: String
  instrumentType: ContractInstrument
  instrumentTypeOther: String
  methodOfSupply: ContractSupplyMethod
  methodOfSupplyOther: String
  solicitationProcedure: ContractSolicitationProcedure
  subjectToTradeAgreement: YesNoUnsure
  workRequirementDescription: String
  hasPersonnelRequirements: YesNo
  personnelRequirements: [DigitalContractingPersonnelRequirement!]
  qualificationRequirement: String
  requirementAccessToSecure: YesNo
  requirementScreeningLevels: [PersonnelScreeningLevel!]
  requirementScreeningLevelOther: String
  requirementWorkLanguages: [PersonnelLanguage!]
  requirementWorkLanguageOther: String
  requirementWorkLocations: [PersonnelWorkLocation!]
  requirementWorkLocationGcSpecific: String
  requirementWorkLocationOffsiteSpecific: String
  requirementOthers: [PersonnelOtherRequirement!]
  requirementOtherOther: String
  isTechnologicalChange: YesNo
  hasImpactOnYourDepartment: YesNo
  hasImmediateImpactOnOtherDepartments: YesNo
  hasFutureImpactOnOtherDepartments: YesNo
  operationsConsiderations: [OperationsConsideration!]
  operationsConsiderationsOther: String
  contractingRationalePrimary: ContractingRationale
  contractingRationalePrimaryOther: String
  contractingRationalesSecondary: [ContractingRationale!]
  contractingRationalesSecondaryOther: String
  ocioConfirmedTalentShortage: YesNo
  talentSearchTrackingNumber: String
  ongoingNeedForKnowledge: YesNo
  knowledgeTransferInContract: YesNo
  employeesHaveAccessToKnowledge: YesNo
  ocioEngagedForTraining: YesNo
}

input CreateDigitalContractingPersonnelSkillInput {
  skill: SkillBelongsTo
  level: SkillLevel
}

input UpdateDigitalContractingPersonnelSkillInput {
  id: UUID!
  skill: SkillBelongsTo
  level: SkillLevel
}

input DigitalContractingPersonnelSkillBelongsTo {
  create: [CreateDigitalContractingPersonnelSkillInput!]
  update: [UpdateDigitalContractingPersonnelSkillInput!]
  delete: [UUID!]
}

input CreateDigitalContractingPersonnelRequirementInput {
  resourceType: String
  skillRequirements: DigitalContractingPersonnelSkillBelongsTo
  language: PersonnelLanguage
  languageOther: String
  security: PersonnelScreeningLevel
  securityOther: String
  telework: PersonnelTeleworkOption
  quantity: Int
}

input UpdateDigitalContractingPersonnelRequirementInput {
  id: UUID!
  resourceType: String
  skillRequirements: DigitalContractingPersonnelSkillBelongsTo
  language: PersonnelLanguage
  languageOther: String
  security: PersonnelScreeningLevel
  securityOther: String
  telework: PersonnelTeleworkOption
  quantity: Int
}

input DigitalContractingPersonnelRequirementBelongsToMany {
  create: [CreateDigitalContractingPersonnelRequirementInput!]
  update: [UpdateDigitalContractingPersonnelRequirementInput!]
  delete: [UUID!]
}

input DigitalContractingQuestionnaireInput {
  department: DepartmentBelongsTo
  departmentOther: String
  branchOther: String
  businessOwnerName: String
  businessOwnerJobTitle: String
  businessOwnerEmail: String
  financialAuthorityName: String
  financialAuthorityJobTitle: String
  financialAuthorityEmail: String
  authoritiesInvolved: [ContractAuthority!]
  authorityInvolvedOther: String
  contractBehalfOfGc: YesNoUnsure
  contractServiceOfGc: YesNoUnsure
  contractForDigitalInitiative: YesNoUnsure
  digitalInitiativeName: String
  digitalInitiativePlanSubmitted: YesNoUnsure
  digitalInitiativePlanUpdated: YesNoUnsure
  digitalInitiativePlanComplemented: YesNoUnsure
  contractTitle: String
  contractStartDate: Date
  contractEndDate: Date
  contractExtendable: YesNo
  contractAmendable: YesNo
  contractMultiyear: YesNo
  contractValue: ContractValueRange
  contractFtes: ContractFteRange
  contractResourcesStartTimeframe: ContractStartTimeframe
  commodityType: ContractCommodity
  commodityTypeOther: String
  instrumentType: ContractInstrument
  instrumentTypeOther: String
  methodOfSupply: ContractSupplyMethod
  methodOfSupplyOther: String
  solicitationProcedure: ContractSolicitationProcedure
  subjectToTradeAgreement: YesNoUnsure
  workRequirementDescription: String
  hasPersonnelRequirements: YesNo
  personnelRequirements: DigitalContractingPersonnelRequirementBelongsToMany
  qualificationRequirement: String
  requirementAccessToSecure: YesNo
  requirementScreeningLevels: [PersonnelScreeningLevel!]
  requirementScreeningLevelOther: String
  requirementWorkLanguages: [PersonnelLanguage!]
  requirementWorkLanguageOther: String
  requirementWorkLocations: [PersonnelWorkLocation!]
  requirementWorkLocationGcSpecific: String
  requirementWorkLocationOffsiteSpecific: String
  requirementOthers: [PersonnelOtherRequirement!]
  requirementOtherOther: String
  isTechnologicalChange: YesNo
  hasImpactOnYourDepartment: YesNo
  hasImmediateImpactOnOtherDepartments: YesNo
  hasFutureImpactOnOtherDepartments: YesNo
  operationsConsiderations: [OperationsConsideration!]
  operationsConsiderationsOther: String
  contractingRationalePrimary: ContractingRationale
  contractingRationalePrimaryOther: String
  contractingRationalesSecondary: [ContractingRationale!]
  contractingRationalesSecondaryOther: String
  ocioConfirmedTalentShortage: YesNo
  talentSearchTrackingNumber: String
  ongoingNeedForKnowledge: YesNo
  knowledgeTransferInContract: YesNo
  employeesHaveAccessToKnowledge: YesNo
  ocioEngagedForTraining: YesNo
}

type DepartmentSpecificRecruitmentProcessPosition {
  id: UUID!
  classificationGroup: String
  classificationLevel: String
  jobTitle: String
  employmentTypes: [PositionEmploymentType!]
  employmentTypesOther: String
}

type DepartmentSpecificRecruitmentProcessForm {
  id: UUID!
  department: Department
  departmentOther: String
  recruitmentProcessLeadName: String
  recruitmentProcessLeadJobTitle: String
  recruitmentProcessLeadEmail: String
  postingDate: Date
  positions: [DepartmentSpecificRecruitmentProcessPosition!]
  advertisementType: AdvertisementType
  advertisingPlatforms: [AdvertisingPlatform!]
  advertisingPlatformsOther: String
  jobAdvertisementLink: String
}

input CreateDepartmentSpecificRecruitmentProcessPositionInput {
  classificationGroup: String
  classificationLevel: String
  jobTitle: String
  employmentTypes: [PositionEmploymentType!]
  employmentTypesOther: String
}

input UpdateDepartmentSpecificRecruitmentProcessPositionInput {
  id: UUID!
  classificationGroup: String
  classificationLevel: String
  jobTitle: String
  employmentTypes: [PositionEmploymentType!]
  employmentTypesOther: String
}

input DepartmentSpecificRecruitmentProcessPositionBelongsToMany {
  create: [CreateDepartmentSpecificRecruitmentProcessPositionInput!]
  update: [UpdateDepartmentSpecificRecruitmentProcessPositionInput!]
  delete: [UUID!]
}

input DepartmentSpecificRecruitmentProcessFormInput {
  department: DepartmentBelongsTo
  departmentOther: String
  recruitmentProcessLeadName: String
  recruitmentProcessLeadJobTitle: String
  recruitmentProcessLeadEmail: String
  postingDate: Date
  positions: DepartmentSpecificRecruitmentProcessPositionBelongsToMany
  advertisementType: AdvertisementType
  advertisingPlatforms: [AdvertisingPlatform!]
  advertisingPlatformsOther: String
  jobAdvertisementLink: String
}

"Information about pagination using a fully featured paginator."
type PaginatorInfo {
  "Number of items in the current page."
  count: Int!

  "Index of the current page."
  currentPage: Int!

  "Index of the first item in the current page."
  firstItem: Int

  "Are there more pages after this one?"
  hasMorePages: Boolean!

  "Index of the last item in the current page."
  lastItem: Int

  "Index of the last available page."
  lastPage: Int!

  "Number of items per page."
  perPage: Int!

  "Number of total available items."
  total: Int!
}

"A paginated list of User items."
type UserPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of User items."
  data: [User!]!
}

"A paginated list of UserPublicProfile items."
type UserPublicProfilePaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of UserPublicProfile items."
  data: [UserPublicProfile!]!
}

"A paginated list of Pool items."
type PoolPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of Pool items."
  data: [Pool!]!
}

"A paginated list of PoolCandidateWithSkillCount items."
type PoolCandidateWithSkillCountPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of PoolCandidateWithSkillCount items."
  data: [PoolCandidateWithSkillCount!]!
}

"A paginated list of PoolCandidateSearchRequest items."
type PoolCandidateSearchRequestPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of PoolCandidateSearchRequest items."
  data: [PoolCandidateSearchRequest!]!
}

"A paginated list of Notification items."
type NotificationPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of Notification items."
  data: [Notification!]!
}

"A paginated list of TrainingOpportunity items."
type TrainingOpportunityPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of TrainingOpportunity items."
  data: [TrainingOpportunity!]!
}

"Allowed column names for Query.poolsPaginated.orderBy."
enum QueryPoolsPaginatedOrderByUserColumn {
  FIRST_NAME
  EMAIL
}

"Aggregate specification for Query.poolsPaginated.orderBy.user."
input QueryPoolsPaginatedOrderByUser {
  "The aggregate function to apply to the column."
  aggregate: OrderByRelationWithColumnAggregateFunction!

  "Name of the column to use."
  column: QueryPoolsPaginatedOrderByUserColumn
}

"Allowed column names for Query.poolsPaginated.orderBy."
enum QueryPoolsPaginatedOrderByClassificationColumn {
  GROUP
  LEVEL
}

"Aggregate specification for Query.poolsPaginated.orderBy.classification."
input QueryPoolsPaginatedOrderByClassification {
  "The aggregate function to apply to the column."
  aggregate: OrderByRelationWithColumnAggregateFunction!

  "Name of the column to use."
  column: QueryPoolsPaginatedOrderByClassificationColumn
}

"Order by clause for Query.poolsPaginated.orderBy."
input QueryPoolsPaginatedOrderByRelationOrderByClause {
  "The column that is used for ordering."
  column: String

  "The direction that is used for ordering."
  order: SortOrder!

  "Aggregate specification."
  user: QueryPoolsPaginatedOrderByUser

  "Aggregate specification."
  classification: QueryPoolsPaginatedOrderByClassification
}

"Allowed column names for Query.poolCandidatesPaginated.orderBy."
enum QueryPoolCandidatesPaginatedOrderByUserColumn {
  PRIORITY_WEIGHT
  FIRST_NAME
  EMAIL
  PREFERRED_LANG
  PREFERRED_LANGUAGE_FOR_INTERVIEW
  PREFERRED_LANGUAGE_FOR_EXAM
  CURRENT_CITY
}

"Aggregate specification for Query.poolCandidatesPaginated.orderBy.user."
input QueryPoolCandidatesPaginatedOrderByUser {
  "The aggregate function to apply to the column."
  aggregate: OrderByRelationWithColumnAggregateFunction!

  "Name of the column to use."
  column: QueryPoolCandidatesPaginatedOrderByUserColumn
}

"Allowed column names for Query.poolCandidatesPaginated.orderBy."
enum QueryPoolCandidatesPaginatedOrderByPoolColumn {
  PROCESS_NUMBER
}

"Aggregate specification for Query.poolCandidatesPaginated.orderBy.pool."
input QueryPoolCandidatesPaginatedOrderByPool {
  "The aggregate function to apply to the column."
  aggregate: OrderByRelationWithColumnAggregateFunction!

  "Name of the column to use."
  column: QueryPoolCandidatesPaginatedOrderByPoolColumn
}

"Order by clause for Query.poolCandidatesPaginated.orderBy."
input QueryPoolCandidatesPaginatedOrderByRelationOrderByClause {
  "The column that is used for ordering."
  column: String

  "The direction that is used for ordering."
  order: SortOrder!

  "Aggregate specification."
  user: QueryPoolCandidatesPaginatedOrderByUser

  "Aggregate specification."
  pool: QueryPoolCandidatesPaginatedOrderByPool
}

"Directions for ordering a list of records."
enum SortOrder {
  "Sort records in ascending order."
  ASC

  "Sort records in descending order."
  DESC
}

"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
  "Amount of items."
  COUNT
}

"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
  "Average."
  AVG

  "Minimum."
  MIN

  "Maximum."
  MAX

  "Sum."
  SUM

  "Amount of items."
  COUNT
}

"Allows ordering a list of records."
input OrderByClause {
  "The column that is used for ordering."
  column: String!

  "The direction that is used for ordering."
  order: SortOrder!
}

"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
  "Only return trashed results."
  ONLY

  "Return both trashed and non-trashed results."
  WITH

  "Only return non-trashed results."
  WITHOUT
}

"Dynamic WHERE conditions for queries."
input WhereConditions {
  "The column that is used for the condition."
  column: String

  "The operator that is used for the condition."
  operator: SQLOperator = EQ

  "The value that is used for the condition."
  value: Mixed

  "A set of conditions that requires all conditions to match."
  AND: [WhereConditions!]

  "A set of conditions that requires at least one condition to match."
  OR: [WhereConditions!]

  "Check whether a relation exists. Extra conditions or a minimum amount can be applied."
  HAS: WhereConditionsRelation
}

"Dynamic HAS conditions for WHERE condition queries."
input WhereConditionsRelation {
  "The relation that is checked."
  relation: String!

  "The comparison operator to test against the amount."
  operator: SQLOperator = GTE

  "The amount to test."
  amount: Int = 1

  "Additional condition logic."
  condition: WhereConditions
}

"The available SQL operators that are used to filter query results."
enum SQLOperator {
  "Equal operator (`=`)"
  EQ

  "Not equal operator (`!=`)"
  NEQ

  "Greater than operator (`>`)"
  GT

  "Greater than or equal operator (`>=`)"
  GTE

  "Less than operator (`<`)"
  LT

  "Less than or equal operator (`<=`)"
  LTE

  "Simple pattern matching (`LIKE`)"
  LIKE

  "Negation of simple pattern matching (`NOT LIKE`)"
  NOT_LIKE

  "Whether a value is within a set of values (`IN`)"
  IN

  "Whether a value is not within a set of values (`NOT IN`)"
  NOT_IN

  "Whether a value is within a range of values (`BETWEEN`)"
  BETWEEN

  "Whether a value is not within a range of values (`NOT BETWEEN`)"
  NOT_BETWEEN

  "Whether a value is null (`IS NULL`)"
  IS_NULL

  "Whether a value is not null (`IS NOT NULL`)"
  IS_NOT_NULL

  "Whether a set of values contains a value (`@>`)"
  CONTAINS
}

"""
Loose type that allows any value. Be careful when passing in large `Int` or `Float` literals,
as they may not be parsed correctly on the server side. Use `String` literals if you are
dealing with really large numbers to be on the safe side.
"""
scalar Mixed

enum Language {
  EN
  FR
}

enum ApplicationStep {
  WELCOME
  SELF_DECLARATION
  REVIEW_YOUR_PROFILE
  REVIEW_YOUR_RESUME
  EDUCATION_REQUIREMENTS
  SKILL_REQUIREMENTS
  SCREENING_QUESTIONS
  REVIEW_AND_SUBMIT
}

enum ArmedForcesStatus {
  VETERAN
  MEMBER
  NON_CAF
}

enum AssessmentDecision {
  HOLD
  SUCCESSFUL
  UNSUCCESSFUL
}

enum AssessmentDecisionLevel {
  AT_REQUIRED
  ABOVE_REQUIRED
  ABOVE_AND_BEYOND_REQUIRED
}

enum AssessmentResultJustification {
  EDUCATION_ACCEPTED_INFORMATION
  EDUCATION_ACCEPTED_WORK_EXPERIENCE_EQUIVALENCY
  EDUCATION_ACCEPTED_COMBINATION_EDUCATION_WORK_EXPERIENCE
  EDUCATION_FAILED_NOT_RELEVANT
  EDUCATION_FAILED_REQUIREMENT_NOT_MET
  SKILL_FAILED_INSUFFICIENTLY_DEMONSTRATED
  FAILED_NOT_ENOUGH_INFORMATION
  FAILED_OTHER
}

enum AssessmentResultType {
  EDUCATION
  SKILL
}

enum AssessmentStepType {
  SCREENING_QUESTIONS_AT_APPLICATION
  TECHNICAL_EXAM_AT_SITE
  TECHNICAL_EXAM_AT_HOME
  PSC_EXAM
  INTERVIEW_GROUP
  INTERVIEW_INDIVIDUAL
  INTERVIEW_FOLLOWUP
  REFERENCE_CHECK
  APPLICATION_SCREENING
  ADDITIONAL_ASSESSMENT
}

enum AwardedScope {
  INTERNATIONAL
  NATIONAL
  PROVINCIAL
  LOCAL
  COMMUNITY
  ORGANIZATIONAL
  SUB_ORGANIZATIONAL
}

enum AwardedTo {
  ME
  MY_TEAM
  MY_PROJECT
  MY_ORGANIZATION
}

enum CafEmploymentType {
  REGULAR_FORCE
  RESERVE_FORCE
}

enum CafForce {
  CANADIAN_ARMY
  ROYAL_CANADIAN_AIR_FORCE
  ROYAL_CANADIAN_NAVY
}

enum CafRank {
  GENERAL_FLAG_OFFICER
  SENIOR_OFFICER
  JUNIOR_OFFICER
  SUBORDINATE_OFFICER
  WARRANT_PETTY_SENIOR_NCO
  JUNIOR_NON_COMMISSIONED
}

enum CandidateExpiryFilter {
  ACTIVE
  EXPIRED
  ALL
}

enum CandidateRemovalReason {
  REQUESTED_TO_BE_WITHDRAWN
  NOT_RESPONSIVE
  OTHER
}

enum CandidateSuspendedFilter {
  ACTIVE
  SUSPENDED
  ALL
}

enum CitizenshipStatus {
  PERMANENT_RESIDENT
  CITIZEN
  OTHER
}

enum ClaimVerificationResult {
  ACCEPTED
  REJECTED
  UNVERIFIED
}

enum CourseFormat {
  ON_SITE
  VIRTUAL
}

enum CourseLanguage {
  ENGLISH
  FRENCH
  BILINGUAL
}

enum DeadlineStatus {
  PUBLISHED
  EXPIRED
}

enum DevelopmentProgramParticipationStatus {
  NOT_INTERESTED
  INTERESTED
  ENROLLED
  COMPLETED
}

enum AdvertisementType {
  INTERNAL
  EXTERNAL
}

enum AdvertisingPlatform {
  GCJOBS
  GCCONNEX
  GCXCHANGE
  GC_COLLAB
  FACEBOOK
  LINKEDIN
  OTHER
}

enum ContractAuthority {
  HR
  PROCUREMENT
  FINANCE
  LABOUR_RELATIONS
  OTHER
}

enum ContractCommodity {
  TELECOM_SERVICES
  SUPPORT_SERVICES
  OTHER
}

enum ContractFteRange {
  FROM_1_TO_5
  FROM_6_TO_10
  FROM_11_TO_30
  FROM_31_TO_50
  FROM_51_TO_100
  GREATER_THAN_100
}

enum ContractInstrument {
  SUPPLY_ARRANGEMENT
  STANDING_OFFER
  CONTRACT
  AMENDMENT
  OTHER
}

enum ContractSolicitationProcedure {
  ADVANCE_CONTRACT_AWARD_NOTICE
  COMPETITIVE
  NON_COMPETITIVE
}

enum ContractStartTimeframe {
  FROM_0_TO_3M
  FROM_3M_TO_6M
  FROM_6M_TO_1Y
  FROM_1Y_TO_2Y
  UNKNOWN
  VARIABLE
}

enum ContractSupplyMethod {
  NOT_APPLICABLE
  SOLUTIONS_BASED_INFORMATICS_PROFESSIONAL_SERVICES
  TASK_BASED_INFORMATICS_PROFESSIONAL_SERVICES
  TEMPORARY_HELP
  OTHER
}

enum ContractValueRange {
  FROM_0_TO_10K
  FROM_10K_TO_25K
  FROM_25K_TO_50K
  FROM_50K_TO_1M
  FROM_1M_TO_2500K
  FROM_2500K_TO_5M
  FROM_5M_TO_10M
  FROM_10M_TO_15M
  FROM_15M_TO_25M
  GREATER_THAN_25M
}

enum ContractingRationale {
  SHORTAGE_OF_TALENT
  TIMING_REQUIREMENTS
  HR_SITUATION
  FINANCIAL_SITUATION
  REQUIRES_INDEPENDENT
  INTELLECTUAL_PROPERTY_FACTORS
  OTHER
}

enum OperationsConsideration {
  FINANCE_VEHICLE_NOT_USABLE
  FUNDING_SECURED_COST_RECOVERY_BASIS
  UNABLE_CREATE_NEW_INDETERMINATE
  UNABLE_CREATE_NEW_TERM
  UNABLE_CREATE_CLASSIFICATION_RESTRICTION
  STAFFING_FREEZE
  OTHER
}

enum PersonnelLanguage {
  ENGLISH_ONLY
  FRENCH_ONLY
  BILINGUAL_INTERMEDIATE
  BILINGUAL_ADVANCED
  OTHER
}

enum PersonnelOtherRequirement {
  SHIFT_WORK
  ON_CALL_24_7
  OVERTIME_SHORT_NOTICE
  AS_NEEDED
  OTHER
}

enum PersonnelScreeningLevel {
  RELIABILITY
  ENHANCED_RELIABILITY
  SECRET
  TOP_SECRET
  OTHER
}

enum PersonnelSkillExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
  LEAD
}

enum PersonnelTeleworkOption {
  FULL_TIME
  PART_TIME
  NO
}

enum PersonnelWorkLocation {
  GC_PREMISES
  OFFSITE_SPECIFIC
  OFFSITE_ANY
}

enum PositionEmploymentType {
  INDETERMINATE
  TERM
  LATERAL_DEPLOYMENT
  SECONDMENT
  ASSIGNMENT
  OTHER
}

enum YesNo {
  YES
  NO
}

enum YesNoUnsure {
  YES
  NO
  I_DONT_KNOW
}

enum DisqualificationReason {
  SCREENED_OUT_APPLICATION
  SCREENED_OUT_ASSESSMENT
}

enum EducationRequirementOption {
  APPLIED_WORK
  EDUCATION
  PROFESSIONAL_DESIGNATION
}

enum EducationStatus {
  SUCCESS_CREDENTIAL
  SUCCESS_NO_CREDENTIAL
  IN_PROGRESS
  AUDITED
  DID_NOT_COMPLETE
}

enum EducationType {
  DIPLOMA
  BACHELORS_DEGREE
  MASTERS_DEGREE
  PHD
  POST_DOCTORAL_FELLOWSHIP
  ONLINE_COURSE
  CERTIFICATION
  OTHER
}

enum EmailType {
  CONTACT
  WORK
}

enum EmploymentCategory {
  EXTERNAL_ORGANIZATION
  GOVERNMENT_OF_CANADA
  CANADIAN_ARMED_FORCES
}

enum EstimatedLanguageAbility {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EvaluatedLanguageAbility {
  X
  A
  B
  C
  E
  P
  NOT_ASSESSED
}

enum ExecCoaching {
  COACHING
  LEARNING
}

enum ExternalRoleSeniority {
  INTERN_COOP
  JUNIOR
  INTERMEDIATE
  SENIOR
  TEAM_LEAD_MANAGER
  EXECUTIVE
  SENIOR_EXECUTIVE
  SELF_EMPLOYED
}

enum ExternalSizeOfOrganization {
  ONE_TO_THIRTY_FIVE
  THIRTY_SIX_TO_ONE_HUNDRED
  ONE_HUNDRED_ONE_TO_ONE_THOUSAND
  ONE_THOUSAND_PLUS
}

enum FinalDecision {
  DISQUALIFIED
  DISQUALIFIED_PENDING
  DISQUALIFIED_REMOVED
  QUALIFIED
  QUALIFIED_EXPIRED
  QUALIFIED_PENDING
  QUALIFIED_PLACED
  QUALIFIED_REMOVED
  REMOVED
  TO_ASSESS
  TO_ASSESS_REMOVED
}

enum GenericJobTitleKey {
  TECHNICIAN_IT01
  ANALYST_IT02
  TEAM_LEADER_IT03
  TECHNICAL_ADVISOR_IT03
  SENIOR_ADVISOR_IT04
  MANAGER_IT04
  DIGITAL_LEADER_EX_03
}

enum GovContractorRoleSeniority {
  INTERN_COOP
  JUNIOR
  INTERMEDIATE
  SENIOR
  TEAM_LEAD_MANAGER
  EXECUTIVE
  SENIOR_EXECUTIVE
}

enum GovContractorType {
  SELF_EMPLOYED
  FIRM_OR_AGENCY
}

enum GovEmployeeType {
  STUDENT
  CASUAL
  TERM
  INDETERMINATE
}

enum GovPositionType {
  SUBSTANTIVE
  ACTING
  SECONDMENT
  ASSIGNMENT
}

enum IndigenousCommunity {
  STATUS_FIRST_NATIONS
  NON_STATUS_FIRST_NATIONS
  INUIT
  METIS
  OTHER
  LEGACY_IS_INDIGENOUS
}

enum LanguageAbility {
  ENGLISH
  FRENCH
  BILINGUAL
}

enum Mentorship {
  MENTOR
  MENTEE
}

enum MoveInterest {
  ABOVE_LEVEL
  AT_LEVEL
  BELOW_LEVEL
}

enum NotificationFamily {
  SYSTEM_MESSAGE
  APPLICATION_UPDATE
  JOB_ALERT
}

enum NullsOption {
  ORDER_FIRST
  ORDER_LAST
}

enum OperationalRequirement {
  SHIFT_WORK
  ON_CALL
  TRAVEL
  TRANSPORT_EQUIPMENT
  DRIVERS_LICENSE
  OVERTIME_OCCASIONAL
  OVERTIME_REGULAR
}

enum OrganizationTypeInterest {
  CURRENT
  OTHER_DEPARTMENT
  OTHER_AGENCY
  OTHER_CROWN_CORP
}

enum OverallAssessmentStatus {
  TO_ASSESS
  DISQUALIFIED
  QUALIFIED
}

enum PlacementType {
  PLACED_TENTATIVE
  PLACED_CASUAL
  PLACED_TERM
  PLACED_INDETERMINATE
}

enum PoolAreaOfSelection {
  PUBLIC
  EMPLOYEES
}

enum PoolCandidateSearchPositionType {
  INDIVIDUAL_CONTRIBUTOR
  TEAM_LEAD
}

enum PoolCandidateSearchRequestReason {
  IMMEDIATE_HIRE
  UPCOMING_NEED
  GENERAL_INTEREST
  REQUIRED_BY_DIRECTIVE
}

enum PoolCandidateSearchStatus {
  NEW
  IN_PROGRESS
  WAITING
  DONE
  DONE_NO_CANDIDATES
  NOT_COMPLIANT
}

enum PoolCandidateStatus {
  DRAFT
  DRAFT_EXPIRED
  NEW_APPLICATION
  APPLICATION_REVIEW
  SCREENED_IN
  SCREENED_OUT_APPLICATION
  SCREENED_OUT_NOT_INTERESTED
  SCREENED_OUT_NOT_RESPONSIVE
  UNDER_ASSESSMENT
  SCREENED_OUT_ASSESSMENT
  QUALIFIED_AVAILABLE
  QUALIFIED_UNAVAILABLE
  QUALIFIED_WITHDREW
  PLACED_TENTATIVE
  PLACED_CASUAL
  PLACED_TERM
  PLACED_INDETERMINATE
  EXPIRED
  REMOVED
}

enum PoolLanguage {
  ENGLISH
  FRENCH
  VARIOUS
  BILINGUAL_INTERMEDIATE
  BILINGUAL_ADVANCED
}

enum PoolOpportunityLength {
  TERM_SIX_MONTHS
  TERM_ONE_YEAR
  TERM_TWO_YEARS
  INDETERMINATE
  VARIOUS
}

enum PoolSelectionLimitation {
  AT_LEVEL_ONLY
  DEPARTMENTAL_PREFERENCE
}

enum PoolSkillType {
  ESSENTIAL
  NONESSENTIAL
}

enum PoolStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum PoolStream {
  ACCESS_INFORMATION_PRIVACY
  BUSINESS_ADVISORY_SERVICES
  DATABASE_MANAGEMENT
  ENTERPRISE_ARCHITECTURE
  INFRASTRUCTURE_OPERATIONS
  PLANNING_AND_REPORTING
  PROJECT_PORTFOLIO_MANAGEMENT
  SECURITY
  SOFTWARE_SOLUTIONS
  INFORMATION_DATA_FUNCTIONS
  EXECUTIVE_GROUP
}

enum PositionDuration {
  TEMPORARY
  PERMANENT
}

enum PriorityWeight {
  PRIORITY_ENTITLEMENT
  VETERAN
  CITIZEN_OR_PERMANENT_RESIDENT
  OTHER
}

enum ProvinceOrTerritory {
  BRITISH_COLUMBIA
  ALBERTA
  SASKATCHEWAN
  MANITOBA
  ONTARIO
  QUEBEC
  NEW_BRUNSWICK
  NOVA_SCOTIA
  PRINCE_EDWARD_ISLAND
  NEWFOUNDLAND_AND_LABRADOR
  YUKON
  NORTHWEST_TERRITORIES
  NUNAVUT
}

enum PublishingGroup {
  IAP
  IT_JOBS
  EXECUTIVE_JOBS
  OTHER
}

enum SecurityStatus {
  RELIABILITY
  SECRET
  TOP_SECRET
}

enum SkillCategory {
  TECHNICAL
  BEHAVIOURAL
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  LEAD
}

enum SupervisoryStatus {
  INDIVIDUAL_CONTRIBUTOR
  SUPERVISOR
}

enum WhenSkillUsed {
  CURRENT
  PAST
}

enum WorkExperienceGovEmployeeType {
  STUDENT
  CASUAL
  TERM
  INDETERMINATE
  CONTRACTOR
}

enum WorkRegion {
  TELEWORK
  NATIONAL_CAPITAL
  ATLANTIC
  QUEBEC
  ONTARIO
  PRAIRIE
  BRITISH_COLUMBIA
  NORTH
}
